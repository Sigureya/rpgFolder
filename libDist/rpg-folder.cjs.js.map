{"version":3,"file":"rpg-folder.cjs.js","sources":["../src/libs/folder/data/detail/detail.ts","../src/libs/folder/data/actor.ts","../src/libs/folder/data/armor.ts","../src/libs/folder/data/class.ts","../src/libs/folder/data/enemy.ts","../src/libs/folder/data/item.ts","../src/libs/folder/data/skill.ts","../src/libs/folder/data/state.ts","../src/libs/folder/data/weapon.ts","../src/libs/folder/data/troop.ts","../src/libs/folder/data/commonEvent.ts","../src/libs/folder/data/mapInfo.ts","../src/libs/folder/data/map.ts","../src/libs/folder/dataDispatch.ts","../src/libs/folder/multiWrite.ts"],"sourcesContent":["import { FOLDER_DATA, type IdentifiedItems } from \"@sigureya/rpgtypes\";\r\nimport type {\r\n  FsLib_WriteFile,\r\n  FsLib_ReadFile,\r\n  PathLib_Resolve,\r\n} from \"./libTypes\";\r\n\r\nexport const normalizeIdentifiedItems = <T>(items: IdentifiedItems<T>): T[] => {\r\n  return items.filter((item): item is T => item !== null);\r\n};\r\n\r\nexport const denormalizeIdentifiedItems = <T>(\r\n  items: T[]\r\n): IdentifiedItems<T> => {\r\n  return [null, ...items];\r\n};\r\n\r\nexport const ensureDataFolderPath = (\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string\r\n): string => {\r\n  return ensureDataPath(pathLib, basePath, \"\");\r\n};\r\n\r\nexport const ensureDataPath = (\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string,\r\n  fileName: string\r\n): string => {\r\n  return basePath.endsWith(`${pathLib.sep}${FOLDER_DATA}`)\r\n    ? pathLib.resolve(basePath, fileName)\r\n    : pathLib.resolve(basePath, FOLDER_DATA, fileName);\r\n};\r\n\r\nexport const validateAndFilterItems = <T>(\r\n  list: unknown,\r\n  fn: (data: unknown) => data is T\r\n): T[] => {\r\n  if (Array.isArray(list)) {\r\n    return list.filter((item) => fn(item));\r\n  }\r\n  throw new Error(\"Invalid data format\");\r\n};\r\n\r\nexport const writeDataFile = async <T>(\r\n  fsLib: FsLib_WriteFile,\r\n  path: string,\r\n  data: T[],\r\n  space: number = 2\r\n): Promise<void> => {\r\n  const list: [null, ...T[]] = denormalizeIdentifiedItems(data);\r\n  return fsLib.writeFile(path, JSON.stringify(list, null, space), \"utf-8\");\r\n};\r\n\r\nexport const readDataFile = async <T>(\r\n  fsLib: FsLib_ReadFile,\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string,\r\n  fileName: string,\r\n  validateFn: (data: unknown) => data is T\r\n): Promise<T[]> => {\r\n  const path: string = ensureDataPath(pathLib, basePath, fileName);\r\n  return readRmmzDataListFile(fsLib, path, validateFn);\r\n};\r\n\r\nexport const readRmmzDataListFile = async <T>(\r\n  fsLib: FsLib_ReadFile,\r\n  resolvedPath: string,\r\n  validateFn: (data: unknown) => data is T\r\n): Promise<T[]> => {\r\n  const jsonText: string = await fsLib.readFile(resolvedPath, \"utf-8\");\r\n  const obj = JSON.parse(jsonText);\r\n  return validateAndFilterItems(obj, validateFn);\r\n};\r\n","import {\r\n  FILENAME_ACTORS,\r\n  isDataActor,\r\n  type Data_Actor,\r\n} from \"@sigureya/rpgtypes\";\r\nimport type {\r\n  FsLib_ReadFile,\r\n  FsLib_WriteFile,\r\n  PathLib_Resolve,\r\n} from \"./detail/libTypes\";\r\nimport { ensureDataPath, readRmmzDataListFile, writeDataFile } from \"./detail\";\r\n\r\nexport const ensureActorDataPath = (\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string\r\n): string => {\r\n  return ensureDataPath(pathLib, basePath, FILENAME_ACTORS);\r\n};\r\n\r\nexport const writeRmmzActorData = (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_WriteFile,\r\n  basePath: string,\r\n  actors: Data_Actor[],\r\n  space: number = 2\r\n): Promise<void> => {\r\n  const path: string = ensureActorDataPath(pathLib, basePath);\r\n  return writeDataFile(fsLib, path, actors, space);\r\n};\r\n\r\nexport const readRmmzActorData = async (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_ReadFile,\r\n  basePath: string\r\n): Promise<Data_Actor[]> => {\r\n  const path: string = ensureActorDataPath(pathLib, basePath);\r\n  return readRmmzDataListFile<Data_Actor>(fsLib, path, isDataActor);\r\n};\r\n","import {\r\n  FILENAME_ARMORS,\r\n  isDataArmor,\r\n  type Data_Armor,\r\n} from \"@sigureya/rpgtypes\";\r\nimport type {\r\n  FsLib_ReadFile,\r\n  FsLib_WriteFile,\r\n  PathLib_Resolve,\r\n} from \"./detail/libTypes\";\r\nimport { ensureDataPath, readRmmzDataListFile, writeDataFile } from \"./detail\";\r\n\r\nexport const ensureArmorDataPath = (\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string\r\n): string => {\r\n  return ensureDataPath(pathLib, basePath, FILENAME_ARMORS);\r\n};\r\n\r\nexport const writeRmmzArmorData = (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_WriteFile,\r\n  basePath: string,\r\n  armors: Data_Armor[],\r\n  space: number = 2\r\n): Promise<void> => {\r\n  const path: string = ensureArmorDataPath(pathLib, basePath);\r\n  return writeDataFile(fsLib, path, armors, space);\r\n};\r\n\r\nexport const readRmmzArmorData = async (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_ReadFile,\r\n  basePath: string\r\n): Promise<Data_Armor[]> => {\r\n  const path: string = ensureArmorDataPath(pathLib, basePath);\r\n  return readRmmzDataListFile<Data_Armor>(fsLib, path, isDataArmor);\r\n};\r\n","import type {\r\n  FsLib_ReadFile,\r\n  FsLib_WriteFile,\r\n  PathLib_Resolve,\r\n} from \"./detail/libTypes\";\r\nimport {\r\n  FILENAME_CLASSES,\r\n  isDataClass,\r\n  type Data_Class,\r\n} from \"@sigureya/rpgtypes\";\r\nimport { ensureDataPath, readRmmzDataListFile, writeDataFile } from \"./detail\";\r\n\r\nexport const ensureClassDataPath = (\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string\r\n): string => {\r\n  return ensureDataPath(pathLib, basePath, FILENAME_CLASSES);\r\n};\r\n\r\nexport const writeRmmzClassData = (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_WriteFile,\r\n  basePath: string,\r\n  armors: Data_Class[],\r\n  space: number = 2\r\n): Promise<void> => {\r\n  const path: string = ensureClassDataPath(pathLib, basePath);\r\n  return writeDataFile(fsLib, path, armors, space);\r\n};\r\n\r\nexport const readRmmzClassData = async (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_ReadFile,\r\n  basePath: string\r\n): Promise<Data_Class[]> => {\r\n  const path: string = ensureClassDataPath(pathLib, basePath);\r\n  return readRmmzDataListFile<Data_Class>(fsLib, path, isDataClass);\r\n};\r\n","import {\r\n  FILENAME_ENEMIES,\r\n  isDataEnemy,\r\n  type Data_Enemy,\r\n} from \"@sigureya/rpgtypes\";\r\nimport type {\r\n  FsLib_ReadFile,\r\n  FsLib_WriteFile,\r\n  PathLib_Resolve,\r\n} from \"./detail/libTypes\";\r\nimport { ensureDataPath, readRmmzDataListFile, writeDataFile } from \"./detail\";\r\n\r\nexport const ensureEnemyDataPath = (\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string\r\n): string => {\r\n  return ensureDataPath(pathLib, basePath, FILENAME_ENEMIES);\r\n};\r\n\r\nexport const writeRmmzEnemyData = (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_WriteFile,\r\n  basePath: string,\r\n  enemies: Data_Enemy[],\r\n  space: number = 2\r\n): Promise<void> => {\r\n  const path: string = ensureEnemyDataPath(pathLib, basePath);\r\n  return writeDataFile(fsLib, path, enemies, space);\r\n};\r\n\r\nexport const readRmmzEnemyData = async (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_ReadFile,\r\n  basePath: string\r\n): Promise<Data_Enemy[]> => {\r\n  const path: string = ensureEnemyDataPath(pathLib, basePath);\r\n  return readRmmzDataListFile<Data_Enemy>(fsLib, path, isDataEnemy);\r\n};\r\n","import { FILENAME_ITEMS, isDataItem, type Data_Item } from \"@sigureya/rpgtypes\";\r\nimport type {\r\n  FsLib_ReadFile,\r\n  FsLib_WriteFile,\r\n  PathLib_Resolve,\r\n} from \"./detail/libTypes\";\r\nimport { ensureDataPath, readRmmzDataListFile, writeDataFile } from \"./detail\";\r\n\r\nexport const ensureItemDataPath = (\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string\r\n): string => {\r\n  return ensureDataPath(pathLib, basePath, FILENAME_ITEMS);\r\n};\r\n\r\nexport const writeRmmzItemData = (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_WriteFile,\r\n  basePath: string,\r\n  items: Data_Item[],\r\n  space: number = 2\r\n): Promise<void> => {\r\n  const path: string = ensureItemDataPath(pathLib, basePath);\r\n  return writeDataFile(fsLib, path, items, space);\r\n};\r\n\r\nexport const readRmmzItemData = async (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_ReadFile,\r\n  basePath: string\r\n): Promise<Data_Item[]> => {\r\n  const path: string = ensureItemDataPath(pathLib, basePath);\r\n  return readRmmzDataListFile<Data_Item>(fsLib, path, isDataItem);\r\n};\r\n","import {\r\n  FILENAME_SKILLS,\r\n  isDataSkill,\r\n  type Data_Skill,\r\n} from \"@sigureya/rpgtypes\";\r\nimport type {\r\n  FsLib_ReadFile,\r\n  FsLib_WriteFile,\r\n  PathLib_Resolve,\r\n} from \"./detail/libTypes\";\r\nimport { ensureDataPath, readRmmzDataListFile, writeDataFile } from \"./detail\";\r\n\r\nexport const ensureSkillDataPath = (\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string\r\n): string => {\r\n  return ensureDataPath(pathLib, basePath, FILENAME_SKILLS);\r\n};\r\n\r\nexport const writeRmmzSkillData = (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_WriteFile,\r\n  basePath: string,\r\n  skills: Data_Skill[],\r\n  space: number = 2\r\n): Promise<void> => {\r\n  const path: string = ensureSkillDataPath(pathLib, basePath);\r\n  return writeDataFile(fsLib, path, skills, space);\r\n};\r\n\r\nexport const readRmmzSkillData = async (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_ReadFile,\r\n  basePath: string\r\n): Promise<Data_Skill[]> => {\r\n  const path: string = ensureSkillDataPath(pathLib, basePath);\r\n  return readRmmzDataListFile<Data_Skill>(fsLib, path, isDataSkill);\r\n};\r\n","import {\r\n  FILENAME_STATES,\r\n  isDataState,\r\n  type Data_State,\r\n} from \"@sigureya/rpgtypes\";\r\nimport type {\r\n  FsLib_ReadFile,\r\n  FsLib_WriteFile,\r\n  PathLib_Resolve,\r\n} from \"./detail/libTypes\";\r\nimport { ensureDataPath, readRmmzDataListFile, writeDataFile } from \"./detail\";\r\n\r\nexport const ensureStateDataPath = (\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string\r\n): string => {\r\n  return ensureDataPath(pathLib, basePath, FILENAME_STATES);\r\n};\r\n\r\nexport const writeRmmzStateData = (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_WriteFile,\r\n  basePath: string,\r\n  states: Data_State[],\r\n  space: number = 2\r\n): Promise<void> => {\r\n  const path: string = ensureStateDataPath(pathLib, basePath);\r\n  return writeDataFile(fsLib, path, states, space);\r\n};\r\n\r\nexport const readRmmzStateData = async (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_ReadFile,\r\n  basePath: string\r\n): Promise<Data_State[]> => {\r\n  const path: string = ensureStateDataPath(pathLib, basePath);\r\n  return readRmmzDataListFile<Data_State>(fsLib, path, isDataState);\r\n};\r\n","import {\r\n  FILENAME_WEAPONS,\r\n  isDataWeapon,\r\n  type Data_Weapon,\r\n} from \"@sigureya/rpgtypes\";\r\nimport type {\r\n  FsLib_ReadFile,\r\n  FsLib_WriteFile,\r\n  PathLib_Resolve,\r\n} from \"./detail/libTypes\";\r\nimport { ensureDataPath, readRmmzDataListFile, writeDataFile } from \"./detail\";\r\n\r\nexport const ensureWeaponDataPath = (\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string\r\n): string => {\r\n  return ensureDataPath(pathLib, basePath, FILENAME_WEAPONS);\r\n};\r\n\r\nexport const writeRmmzWeaponData = (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_WriteFile,\r\n  basePath: string,\r\n  weapons: Data_Weapon[],\r\n  space: number = 2\r\n): Promise<void> => {\r\n  const path: string = ensureWeaponDataPath(pathLib, basePath);\r\n  return writeDataFile(fsLib, path, weapons, space);\r\n};\r\n\r\nexport const readRmmzWeaponData = async (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_ReadFile,\r\n  basePath: string\r\n): Promise<Data_Weapon[]> => {\r\n  const path: string = ensureWeaponDataPath(pathLib, basePath);\r\n  return readRmmzDataListFile<Data_Weapon>(fsLib, path, isDataWeapon);\r\n};\r\n","import type {\r\n  FsLib_ReadFile,\r\n  FsLib_WriteFile,\r\n  PathLib_Resolve,\r\n} from \"./detail/libTypes\";\r\nimport { ensureDataPath, readRmmzDataListFile, writeDataFile } from \"./detail\";\r\n\r\nimport { FILENAME_TROOPS, type Data_Troop } from \"@sigureya/rpgtypes\";\r\n\r\nconst isDataTroop = (data: unknown): data is Data_Troop => {\r\n  return (\r\n    typeof data === \"object\" &&\r\n    data !== null &&\r\n    \"id\" in data &&\r\n    typeof (data as Data_Troop).id === \"number\"\r\n  );\r\n};\r\n\r\nexport const ensureTroopDataPath = (\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string\r\n): string => {\r\n  return ensureDataPath(pathLib, basePath, FILENAME_TROOPS);\r\n};\r\n\r\nexport const writeRmmzTroopData = (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_WriteFile,\r\n  basePath: string,\r\n  troops: Data_Troop[],\r\n  space: number = 2\r\n): Promise<void> => {\r\n  const path: string = ensureTroopDataPath(pathLib, basePath);\r\n  return writeDataFile(fsLib, path, troops, space);\r\n};\r\n\r\nexport const readRmmzTroopData = async (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_ReadFile,\r\n  basePath: string\r\n): Promise<Data_Troop[]> => {\r\n  const path: string = ensureTroopDataPath(pathLib, basePath);\r\n  return readRmmzDataListFile<Data_Troop>(fsLib, path, isDataTroop);\r\n};\r\n","import {\r\n  FILENAME_COMMON_EVENTS,\r\n  type Data_CommonEvent,\r\n} from \"@sigureya/rpgtypes\";\r\nimport type {\r\n  FsLib_ReadFile,\r\n  FsLib_WriteFile,\r\n  PathLib_Resolve,\r\n} from \"./detail/libTypes\";\r\nimport { ensureDataPath, readRmmzDataListFile, writeDataFile } from \"./detail\";\r\n\r\nconst isCommonEvent = (data: unknown): data is Data_CommonEvent => {\r\n  return !!data && typeof data === \"object\" && \"id\" in data;\r\n};\r\n\r\nexport const ensureCommonEventDataPath = (\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string\r\n): string => {\r\n  return ensureDataPath(pathLib, basePath, FILENAME_COMMON_EVENTS);\r\n};\r\n\r\nexport const writeRmmzCommonEventData = (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_WriteFile,\r\n  basePath: string,\r\n  commonEvents: Data_CommonEvent[],\r\n  space: number = 2\r\n): Promise<void> => {\r\n  const path: string = ensureCommonEventDataPath(pathLib, basePath);\r\n  return writeDataFile(fsLib, path, commonEvents, space);\r\n};\r\n\r\nexport const readRmmzCommonEventData = async (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_ReadFile,\r\n  basePath: string\r\n): Promise<Data_CommonEvent[]> => {\r\n  const path: string = ensureCommonEventDataPath(pathLib, basePath);\r\n  return readRmmzDataListFile<Data_CommonEvent>(fsLib, path, isCommonEvent);\r\n};\r\n","import type { Data_MapInfo } from \"@sigureya/rpgtypes\";\r\nimport { FILENAME_MAP_INFOS, isDataMapInfo } from \"@sigureya/rpgtypes\";\r\nimport { ensureDataPath, writeDataFile, readRmmzDataListFile } from \"./detail\";\r\nimport type {\r\n  PathLib_Resolve,\r\n  FsLib_WriteFile,\r\n  FsLib_ReadFile,\r\n} from \"./detail/libTypes\";\r\n\r\nexport const ensureMapInfoDataPath = (\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string\r\n): string => {\r\n  return ensureDataPath(pathLib, basePath, FILENAME_MAP_INFOS);\r\n};\r\n\r\nexport const writeRmmzMapInfoData = (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_WriteFile,\r\n  basePath: string,\r\n  mapInfos: Data_MapInfo[],\r\n  space: number = 2\r\n): Promise<void> => {\r\n  const path: string = ensureMapInfoDataPath(pathLib, basePath);\r\n  return writeDataFile(fsLib, path, mapInfos, space);\r\n};\r\n\r\nexport const readRmmzMapInfoData = async (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_ReadFile,\r\n  basePath: string\r\n): Promise<Data_MapInfo[]> => {\r\n  const path: string = ensureMapInfoDataPath(pathLib, basePath);\r\n  return readRmmzDataListFile<Data_MapInfo>(fsLib, path, isDataMapInfo);\r\n};\r\n","import type { Data_Map, MapFileInfo } from \"@sigureya/rpgtypes\";\r\nimport {\r\n  isDataMapInfo,\r\n  makeMapData,\r\n  type Data_MapInfo,\r\n} from \"@sigureya/rpgtypes\";\r\nimport type { FsLib_ReadFile, PathLib_Resolve } from \"./detail/libTypes\";\r\nimport type FsLib from \"node:fs/promises\";\r\nimport type { Dirent } from \"node:fs\";\r\nimport { readRmmzMapInfoData } from \"./mapInfo\";\r\ntype InfoType = Pick<Data_MapInfo, \"name\" | \"id\">;\r\n\r\nexport const isMapFileName = (filename: string) => {\r\n  return filename.startsWith(\"Map\") && filename.endsWith(\".json\");\r\n};\r\n\r\nexport const listupMapFiles = async (\r\n  fsLib: Pick<typeof FsLib, \"readdir\">,\r\n  resolvedPath: string\r\n): Promise<Dirent[]> => {\r\n  return (await fsLib.readdir(resolvedPath, { withFileTypes: true })).filter(\r\n    (dirent) => dirent.isFile() && isMapFileName(dirent.name)\r\n  );\r\n};\r\n\r\nconst makeMapFileName = (mapId: number) => {\r\n  return `Map${String(mapId).padStart(3, \"0\")}.json` as const;\r\n};\r\n\r\nexport const resolveMapFilePath = (\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string,\r\n  mapId: number\r\n) => {\r\n  const fileName = makeMapFileName(mapId);\r\n  const filePath = pathLib.resolve(basePath, fileName);\r\n  return { filePath, fileName };\r\n};\r\n\r\nexport type ResultOfReadMapFile = MapFileInfo<Data_Map | undefined>;\r\nconst validateAndNormalizeMapData = (data: unknown): Data_Map => {\r\n  // データの不足分を補い、余計なデータを排除する処理\r\n  return makeMapData(data as {});\r\n};\r\n\r\nexport const readMapFileFromInfo = async (\r\n  fsLib: FsLib_ReadFile,\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string,\r\n  info: InfoType\r\n): Promise<ResultOfReadMapFile> => {\r\n  const { filePath, fileName } = resolveMapFilePath(pathLib, basePath, info.id);\r\n\r\n  try {\r\n    const text = await fsLib.readFile(filePath, \"utf-8\");\r\n    const mapData: Data_Map = validateAndNormalizeMapData(JSON.parse(text));\r\n    return {\r\n      filename: fileName,\r\n      map: mapData,\r\n      editingName: info.name,\r\n    };\r\n  } catch {\r\n    return {\r\n      filename: fileName,\r\n      editingName: info.name,\r\n      map: undefined,\r\n    };\r\n  }\r\n};\r\n\r\nexport const mappingAllMapFiles = async <T>(\r\n  fsLib: FsLib_ReadFile,\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string,\r\n  fn: (data: ResultOfReadMapFile) => T,\r\n  infos?: ReadonlyArray<Data_MapInfo | null>\r\n): Promise<Promise<T>[]> => {\r\n  const list = infos ?? (await readRmmzMapInfoData(pathLib, fsLib, basePath));\r\n  return list\r\n    .filter((item) => !!item && isDataMapInfo(item))\r\n    .map(async (info: Data_MapInfo) => {\r\n      const mapFileInfo = await readMapFileFromInfo(\r\n        fsLib,\r\n        pathLib,\r\n        basePath,\r\n        info\r\n      );\r\n      return fn(mapFileInfo);\r\n    });\r\n};\r\n","import type PathLib from \"node:path\";\r\nimport type FsLib from \"node:fs/promises\";\r\nimport type { DataMapper } from \"./data/types\";\r\nimport {\r\n  SRC_DATA_ACTOR,\r\n  SRC_DATA_ARMOR,\r\n  SRC_DATA_CLASS,\r\n  SRC_DATA_COMMON_EVNET,\r\n  SRC_DATA_ENEMY,\r\n  SRC_DATA_ITEMS,\r\n  SRC_DATA_SKILL,\r\n  SRC_DATA_STATE,\r\n  SRC_DATA_TROOP,\r\n  SRC_DATA_WEAPON,\r\n} from \"@sigureya/rpgtypes\";\r\nimport {\r\n  readRmmzActorData,\r\n  readRmmzArmorData,\r\n  readRmmzClassData,\r\n  readRmmzCommonEventData,\r\n  readRmmzEnemyData,\r\n  readRmmzItemData,\r\n  readRmmzSkillData,\r\n  readRmmzStateData,\r\n  readRmmzTroopData,\r\n  readRmmzWeaponData,\r\n} from \"./data\";\r\ntype FsLib_ReadFile = Pick<typeof FsLib, \"readFile\">;\r\ntype PathLib_Resolve = Pick<typeof PathLib, \"resolve\" | \"sep\">;\r\n\r\nexport const dispatchHandlers = async <T>(\r\n  fsLib: FsLib_ReadFile,\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string,\r\n  dataMapper: Partial<DataMapper<T>>\r\n): Promise<Record<keyof DataMapper<T>, T | undefined>> => {\r\n  return {\r\n    actor: dataMapper.actor\r\n      ? dataMapper.actor(\r\n          await readRmmzActorData(pathLib, fsLib, basePath),\r\n          SRC_DATA_ACTOR\r\n        )\r\n      : undefined,\r\n    armor: dataMapper.armor\r\n      ? dataMapper.armor(\r\n          await readRmmzArmorData(pathLib, fsLib, basePath),\r\n          SRC_DATA_ARMOR\r\n        )\r\n      : undefined,\r\n\r\n    enemy: dataMapper.enemy\r\n      ? dataMapper.enemy(\r\n          await readRmmzEnemyData(pathLib, fsLib, basePath),\r\n          SRC_DATA_ENEMY\r\n        )\r\n      : undefined,\r\n    class: dataMapper.class\r\n      ? dataMapper.class(\r\n          await readRmmzClassData(pathLib, fsLib, basePath),\r\n          SRC_DATA_CLASS\r\n        )\r\n      : undefined,\r\n    item: dataMapper.item\r\n      ? dataMapper.item(\r\n          await readRmmzItemData(pathLib, fsLib, basePath),\r\n          SRC_DATA_ITEMS\r\n        )\r\n      : undefined,\r\n\r\n    skill: dataMapper.skill\r\n      ? dataMapper.skill(\r\n          await readRmmzSkillData(pathLib, fsLib, basePath),\r\n          SRC_DATA_SKILL\r\n        )\r\n      : undefined,\r\n\r\n    state: dataMapper.state\r\n      ? dataMapper.state(\r\n          await readRmmzStateData(pathLib, fsLib, basePath),\r\n          SRC_DATA_STATE\r\n        )\r\n      : undefined,\r\n    weapon: dataMapper.weapon\r\n      ? dataMapper.weapon(\r\n          await readRmmzWeaponData(pathLib, fsLib, basePath),\r\n          SRC_DATA_WEAPON\r\n        )\r\n      : undefined,\r\n\r\n    troop: dataMapper.troop\r\n      ? dataMapper.troop(\r\n          await readRmmzTroopData(pathLib, fsLib, basePath),\r\n          SRC_DATA_TROOP\r\n        )\r\n      : undefined,\r\n    commonEvent: dataMapper.commonEvent\r\n      ? dataMapper.commonEvent(\r\n          await readRmmzCommonEventData(pathLib, fsLib, basePath),\r\n          SRC_DATA_COMMON_EVNET\r\n        )\r\n      : undefined,\r\n  };\r\n};\r\n","import {\r\n  writeRmmzActorData,\r\n  writeRmmzEnemyData,\r\n  writeRmmzArmorData,\r\n  writeRmmzWeaponData,\r\n  writeRmmzClassData,\r\n  writeRmmzItemData,\r\n  writeRmmzSkillData,\r\n  writeRmmzStateData,\r\n} from \"./data\";\r\nimport type { FsLib_WriteFile, PathLib_Resolve } from \"./data/detail/libTypes\";\r\nimport type { DataTable } from \"./data/types\";\r\n\r\nconst ggg = (fm: () => Promise<void>) => {\r\n  try {\r\n    return fm();\r\n  } catch {\r\n    return Promise.resolve();\r\n  }\r\n};\r\n\r\nexport const writeDataFiles = async (\r\n  fsLib: FsLib_WriteFile,\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string,\r\n  data: DataTable\r\n): Promise<void[]> => {\r\n  return Promise.all([\r\n    ggg(() => writeRmmzActorData(pathLib, fsLib, basePath, data.actors)),\r\n    ggg(() => writeRmmzEnemyData(pathLib, fsLib, basePath, data.enemies)),\r\n    ggg(() => writeRmmzArmorData(pathLib, fsLib, basePath, data.armors)),\r\n    ggg(() => writeRmmzWeaponData(pathLib, fsLib, basePath, data.weapons)),\r\n    ggg(() => writeRmmzClassData(pathLib, fsLib, basePath, data.classes)),\r\n    ggg(() => writeRmmzItemData(pathLib, fsLib, basePath, data.items)),\r\n    ggg(() => writeRmmzSkillData(pathLib, fsLib, basePath, data.skills)),\r\n    ggg(() => writeRmmzStateData(pathLib, fsLib, basePath, data.states)),\r\n  ]);\r\n};\r\n"],"names":["denormalizeIdentifiedItems","items","ensureDataPath","pathLib","basePath","fileName","FOLDER_DATA","validateAndFilterItems","list","fn","item","writeDataFile","fsLib","path","data","space","readRmmzDataListFile","resolvedPath","validateFn","jsonText","obj","ensureActorDataPath","FILENAME_ACTORS","writeRmmzActorData","actors","readRmmzActorData","isDataActor","ensureArmorDataPath","FILENAME_ARMORS","writeRmmzArmorData","armors","readRmmzArmorData","isDataArmor","ensureClassDataPath","FILENAME_CLASSES","writeRmmzClassData","readRmmzClassData","isDataClass","ensureEnemyDataPath","FILENAME_ENEMIES","writeRmmzEnemyData","enemies","readRmmzEnemyData","isDataEnemy","ensureItemDataPath","FILENAME_ITEMS","writeRmmzItemData","readRmmzItemData","isDataItem","ensureSkillDataPath","FILENAME_SKILLS","writeRmmzSkillData","skills","readRmmzSkillData","isDataSkill","ensureStateDataPath","FILENAME_STATES","writeRmmzStateData","states","readRmmzStateData","isDataState","ensureWeaponDataPath","FILENAME_WEAPONS","writeRmmzWeaponData","weapons","readRmmzWeaponData","isDataWeapon","isDataTroop","ensureTroopDataPath","FILENAME_TROOPS","writeRmmzTroopData","troops","readRmmzTroopData","isCommonEvent","ensureCommonEventDataPath","FILENAME_COMMON_EVENTS","writeRmmzCommonEventData","commonEvents","readRmmzCommonEventData","ensureMapInfoDataPath","FILENAME_MAP_INFOS","writeRmmzMapInfoData","mapInfos","readRmmzMapInfoData","isDataMapInfo","isMapFileName","filename","listupMapFiles","dirent","makeMapFileName","mapId","resolveMapFilePath","validateAndNormalizeMapData","makeMapData","readMapFileFromInfo","info","filePath","text","mapData","mappingAllMapFiles","infos","mapFileInfo","dispatchHandlers","dataMapper","SRC_DATA_ACTOR","SRC_DATA_ARMOR","SRC_DATA_ENEMY","SRC_DATA_CLASS","SRC_DATA_ITEMS","SRC_DATA_SKILL","SRC_DATA_STATE","SRC_DATA_WEAPON","SRC_DATA_TROOP","SRC_DATA_COMMON_EVNET","ggg","fm","writeDataFiles"],"mappings":"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"}