{"version":3,"file":"rpg-folder.es.js","sources":["../src/libs/folder/data/detail/detail.ts","../src/libs/folder/data/actor.ts","../src/libs/folder/data/armor.ts","../src/libs/folder/data/class.ts","../src/libs/folder/data/enemy.ts","../src/libs/folder/data/item.ts","../src/libs/folder/data/skill.ts","../src/libs/folder/data/state.ts","../src/libs/folder/data/weapon.ts","../src/libs/folder/data/troop.ts","../src/libs/folder/data/commonEvent.ts","../src/libs/folder/data/mapInfo.ts","../src/libs/folder/data/map.ts","../src/libs/folder/dataDispatch.ts","../src/libs/folder/multiWrite.ts"],"sourcesContent":["import { FOLDER_DATA, type IdentifiedItems } from \"@sigureya/rpgtypes\";\r\nimport type {\r\n  FsLib_WriteFile,\r\n  FsLib_ReadFile,\r\n  PathLib_Resolve,\r\n} from \"./libTypes\";\r\n\r\nexport const normalizeIdentifiedItems = <T>(items: IdentifiedItems<T>): T[] => {\r\n  return items.filter((item): item is T => item !== null);\r\n};\r\n\r\nexport const denormalizeIdentifiedItems = <T>(\r\n  items: T[]\r\n): IdentifiedItems<T> => {\r\n  return [null, ...items];\r\n};\r\n\r\nexport const ensureDataFolderPath = (\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string\r\n): string => {\r\n  return ensureDataPath(pathLib, basePath, \"\");\r\n};\r\n\r\nexport const ensureDataPath = (\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string,\r\n  fileName: string\r\n): string => {\r\n  return basePath.endsWith(`${pathLib.sep}${FOLDER_DATA}`)\r\n    ? pathLib.resolve(basePath, fileName)\r\n    : pathLib.resolve(basePath, FOLDER_DATA, fileName);\r\n};\r\n\r\nexport const validateAndFilterItems = <T>(\r\n  list: unknown,\r\n  fn: (data: unknown) => data is T\r\n): T[] => {\r\n  if (Array.isArray(list)) {\r\n    return list.filter((item) => fn(item));\r\n  }\r\n  throw new Error(\"Invalid data format\");\r\n};\r\n\r\nexport const writeDataFile = async <T>(\r\n  fsLib: FsLib_WriteFile,\r\n  path: string,\r\n  data: T[],\r\n  space: number = 2\r\n): Promise<void> => {\r\n  const list: [null, ...T[]] = denormalizeIdentifiedItems(data);\r\n  return fsLib.writeFile(path, JSON.stringify(list, null, space), \"utf-8\");\r\n};\r\n\r\nexport const readDataFile = async <T>(\r\n  fsLib: FsLib_ReadFile,\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string,\r\n  fileName: string,\r\n  validateFn: (data: unknown) => data is T\r\n): Promise<T[]> => {\r\n  const path: string = ensureDataPath(pathLib, basePath, fileName);\r\n  return readRmmzDataListFile(fsLib, path, validateFn);\r\n};\r\n\r\nexport const readRmmzDataListFile = async <T>(\r\n  fsLib: FsLib_ReadFile,\r\n  resolvedPath: string,\r\n  validateFn: (data: unknown) => data is T\r\n): Promise<T[]> => {\r\n  const jsonText: string = await fsLib.readFile(resolvedPath, \"utf-8\");\r\n  const obj = JSON.parse(jsonText);\r\n  return validateAndFilterItems(obj, validateFn);\r\n};\r\n","import {\r\n  FILENAME_ACTORS,\r\n  isDataActor,\r\n  type Data_Actor,\r\n} from \"@sigureya/rpgtypes\";\r\nimport type {\r\n  FsLib_ReadFile,\r\n  FsLib_WriteFile,\r\n  PathLib_Resolve,\r\n} from \"./detail/libTypes\";\r\nimport { ensureDataPath, readRmmzDataListFile, writeDataFile } from \"./detail\";\r\n\r\nexport const ensureActorDataPath = (\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string\r\n): string => {\r\n  return ensureDataPath(pathLib, basePath, FILENAME_ACTORS);\r\n};\r\n\r\nexport const writeRmmzActorData = (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_WriteFile,\r\n  basePath: string,\r\n  actors: Data_Actor[],\r\n  space: number = 2\r\n): Promise<void> => {\r\n  const path: string = ensureActorDataPath(pathLib, basePath);\r\n  return writeDataFile(fsLib, path, actors, space);\r\n};\r\n\r\nexport const readRmmzActorData = async (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_ReadFile,\r\n  basePath: string\r\n): Promise<Data_Actor[]> => {\r\n  const path: string = ensureActorDataPath(pathLib, basePath);\r\n  return readRmmzDataListFile<Data_Actor>(fsLib, path, isDataActor);\r\n};\r\n","import {\r\n  FILENAME_ARMORS,\r\n  isDataArmor,\r\n  type Data_Armor,\r\n} from \"@sigureya/rpgtypes\";\r\nimport type {\r\n  FsLib_ReadFile,\r\n  FsLib_WriteFile,\r\n  PathLib_Resolve,\r\n} from \"./detail/libTypes\";\r\nimport { ensureDataPath, readRmmzDataListFile, writeDataFile } from \"./detail\";\r\n\r\nexport const ensureArmorDataPath = (\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string\r\n): string => {\r\n  return ensureDataPath(pathLib, basePath, FILENAME_ARMORS);\r\n};\r\n\r\nexport const writeRmmzArmorData = (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_WriteFile,\r\n  basePath: string,\r\n  armors: Data_Armor[],\r\n  space: number = 2\r\n): Promise<void> => {\r\n  const path: string = ensureArmorDataPath(pathLib, basePath);\r\n  return writeDataFile(fsLib, path, armors, space);\r\n};\r\n\r\nexport const readRmmzArmorData = async (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_ReadFile,\r\n  basePath: string\r\n): Promise<Data_Armor[]> => {\r\n  const path: string = ensureArmorDataPath(pathLib, basePath);\r\n  return readRmmzDataListFile<Data_Armor>(fsLib, path, isDataArmor);\r\n};\r\n","import type {\r\n  FsLib_ReadFile,\r\n  FsLib_WriteFile,\r\n  PathLib_Resolve,\r\n} from \"./detail/libTypes\";\r\nimport {\r\n  FILENAME_CLASSES,\r\n  isDataClass,\r\n  type Data_Class,\r\n} from \"@sigureya/rpgtypes\";\r\nimport { ensureDataPath, readRmmzDataListFile, writeDataFile } from \"./detail\";\r\n\r\nexport const ensureClassDataPath = (\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string\r\n): string => {\r\n  return ensureDataPath(pathLib, basePath, FILENAME_CLASSES);\r\n};\r\n\r\nexport const writeRmmzClassData = (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_WriteFile,\r\n  basePath: string,\r\n  armors: Data_Class[],\r\n  space: number = 2\r\n): Promise<void> => {\r\n  const path: string = ensureClassDataPath(pathLib, basePath);\r\n  return writeDataFile(fsLib, path, armors, space);\r\n};\r\n\r\nexport const readRmmzClassData = async (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_ReadFile,\r\n  basePath: string\r\n): Promise<Data_Class[]> => {\r\n  const path: string = ensureClassDataPath(pathLib, basePath);\r\n  return readRmmzDataListFile<Data_Class>(fsLib, path, isDataClass);\r\n};\r\n","import {\r\n  FILENAME_ENEMIES,\r\n  isDataEnemy,\r\n  type Data_Enemy,\r\n} from \"@sigureya/rpgtypes\";\r\nimport type {\r\n  FsLib_ReadFile,\r\n  FsLib_WriteFile,\r\n  PathLib_Resolve,\r\n} from \"./detail/libTypes\";\r\nimport { ensureDataPath, readRmmzDataListFile, writeDataFile } from \"./detail\";\r\n\r\nexport const ensureEnemyDataPath = (\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string\r\n): string => {\r\n  return ensureDataPath(pathLib, basePath, FILENAME_ENEMIES);\r\n};\r\n\r\nexport const writeRmmzEnemyData = (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_WriteFile,\r\n  basePath: string,\r\n  enemies: Data_Enemy[],\r\n  space: number = 2\r\n): Promise<void> => {\r\n  const path: string = ensureEnemyDataPath(pathLib, basePath);\r\n  return writeDataFile(fsLib, path, enemies, space);\r\n};\r\n\r\nexport const readRmmzEnemyData = async (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_ReadFile,\r\n  basePath: string\r\n): Promise<Data_Enemy[]> => {\r\n  const path: string = ensureEnemyDataPath(pathLib, basePath);\r\n  return readRmmzDataListFile<Data_Enemy>(fsLib, path, isDataEnemy);\r\n};\r\n","import { FILENAME_ITEMS, isDataItem, type Data_Item } from \"@sigureya/rpgtypes\";\r\nimport type {\r\n  FsLib_ReadFile,\r\n  FsLib_WriteFile,\r\n  PathLib_Resolve,\r\n} from \"./detail/libTypes\";\r\nimport { ensureDataPath, readRmmzDataListFile, writeDataFile } from \"./detail\";\r\n\r\nexport const ensureItemDataPath = (\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string\r\n): string => {\r\n  return ensureDataPath(pathLib, basePath, FILENAME_ITEMS);\r\n};\r\n\r\nexport const writeRmmzItemData = (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_WriteFile,\r\n  basePath: string,\r\n  items: Data_Item[],\r\n  space: number = 2\r\n): Promise<void> => {\r\n  const path: string = ensureItemDataPath(pathLib, basePath);\r\n  return writeDataFile(fsLib, path, items, space);\r\n};\r\n\r\nexport const readRmmzItemData = async (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_ReadFile,\r\n  basePath: string\r\n): Promise<Data_Item[]> => {\r\n  const path: string = ensureItemDataPath(pathLib, basePath);\r\n  return readRmmzDataListFile<Data_Item>(fsLib, path, isDataItem);\r\n};\r\n","import {\r\n  FILENAME_SKILLS,\r\n  isDataSkill,\r\n  type Data_Skill,\r\n} from \"@sigureya/rpgtypes\";\r\nimport type {\r\n  FsLib_ReadFile,\r\n  FsLib_WriteFile,\r\n  PathLib_Resolve,\r\n} from \"./detail/libTypes\";\r\nimport { ensureDataPath, readRmmzDataListFile, writeDataFile } from \"./detail\";\r\n\r\nexport const ensureSkillDataPath = (\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string\r\n): string => {\r\n  return ensureDataPath(pathLib, basePath, FILENAME_SKILLS);\r\n};\r\n\r\nexport const writeRmmzSkillData = (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_WriteFile,\r\n  basePath: string,\r\n  skills: Data_Skill[],\r\n  space: number = 2\r\n): Promise<void> => {\r\n  const path: string = ensureSkillDataPath(pathLib, basePath);\r\n  return writeDataFile(fsLib, path, skills, space);\r\n};\r\n\r\nexport const readRmmzSkillData = async (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_ReadFile,\r\n  basePath: string\r\n): Promise<Data_Skill[]> => {\r\n  const path: string = ensureSkillDataPath(pathLib, basePath);\r\n  return readRmmzDataListFile<Data_Skill>(fsLib, path, isDataSkill);\r\n};\r\n","import {\r\n  FILENAME_STATES,\r\n  isDataState,\r\n  type Data_State,\r\n} from \"@sigureya/rpgtypes\";\r\nimport type {\r\n  FsLib_ReadFile,\r\n  FsLib_WriteFile,\r\n  PathLib_Resolve,\r\n} from \"./detail/libTypes\";\r\nimport { ensureDataPath, readRmmzDataListFile, writeDataFile } from \"./detail\";\r\n\r\nexport const ensureStateDataPath = (\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string\r\n): string => {\r\n  return ensureDataPath(pathLib, basePath, FILENAME_STATES);\r\n};\r\n\r\nexport const writeRmmzStateData = (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_WriteFile,\r\n  basePath: string,\r\n  states: Data_State[],\r\n  space: number = 2\r\n): Promise<void> => {\r\n  const path: string = ensureStateDataPath(pathLib, basePath);\r\n  return writeDataFile(fsLib, path, states, space);\r\n};\r\n\r\nexport const readRmmzStateData = async (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_ReadFile,\r\n  basePath: string\r\n): Promise<Data_State[]> => {\r\n  const path: string = ensureStateDataPath(pathLib, basePath);\r\n  return readRmmzDataListFile<Data_State>(fsLib, path, isDataState);\r\n};\r\n","import {\r\n  FILENAME_WEAPONS,\r\n  isDataWeapon,\r\n  type Data_Weapon,\r\n} from \"@sigureya/rpgtypes\";\r\nimport type {\r\n  FsLib_ReadFile,\r\n  FsLib_WriteFile,\r\n  PathLib_Resolve,\r\n} from \"./detail/libTypes\";\r\nimport { ensureDataPath, readRmmzDataListFile, writeDataFile } from \"./detail\";\r\n\r\nexport const ensureWeaponDataPath = (\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string\r\n): string => {\r\n  return ensureDataPath(pathLib, basePath, FILENAME_WEAPONS);\r\n};\r\n\r\nexport const writeRmmzWeaponData = (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_WriteFile,\r\n  basePath: string,\r\n  weapons: Data_Weapon[],\r\n  space: number = 2\r\n): Promise<void> => {\r\n  const path: string = ensureWeaponDataPath(pathLib, basePath);\r\n  return writeDataFile(fsLib, path, weapons, space);\r\n};\r\n\r\nexport const readRmmzWeaponData = async (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_ReadFile,\r\n  basePath: string\r\n): Promise<Data_Weapon[]> => {\r\n  const path: string = ensureWeaponDataPath(pathLib, basePath);\r\n  return readRmmzDataListFile<Data_Weapon>(fsLib, path, isDataWeapon);\r\n};\r\n","import type {\r\n  FsLib_ReadFile,\r\n  FsLib_WriteFile,\r\n  PathLib_Resolve,\r\n} from \"./detail/libTypes\";\r\nimport { ensureDataPath, readRmmzDataListFile, writeDataFile } from \"./detail\";\r\n\r\nimport { FILENAME_TROOPS, type Data_Troop } from \"@sigureya/rpgtypes\";\r\n\r\nconst isDataTroop = (data: unknown): data is Data_Troop => {\r\n  return (\r\n    typeof data === \"object\" &&\r\n    data !== null &&\r\n    \"id\" in data &&\r\n    typeof (data as Data_Troop).id === \"number\"\r\n  );\r\n};\r\n\r\nexport const ensureTroopDataPath = (\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string\r\n): string => {\r\n  return ensureDataPath(pathLib, basePath, FILENAME_TROOPS);\r\n};\r\n\r\nexport const writeRmmzTroopData = (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_WriteFile,\r\n  basePath: string,\r\n  troops: Data_Troop[],\r\n  space: number = 2\r\n): Promise<void> => {\r\n  const path: string = ensureTroopDataPath(pathLib, basePath);\r\n  return writeDataFile(fsLib, path, troops, space);\r\n};\r\n\r\nexport const readRmmzTroopData = async (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_ReadFile,\r\n  basePath: string\r\n): Promise<Data_Troop[]> => {\r\n  const path: string = ensureTroopDataPath(pathLib, basePath);\r\n  return readRmmzDataListFile<Data_Troop>(fsLib, path, isDataTroop);\r\n};\r\n","import {\r\n  FILENAME_COMMON_EVENTS,\r\n  type Data_CommonEvent,\r\n} from \"@sigureya/rpgtypes\";\r\nimport type {\r\n  FsLib_ReadFile,\r\n  FsLib_WriteFile,\r\n  PathLib_Resolve,\r\n} from \"./detail/libTypes\";\r\nimport { ensureDataPath, readRmmzDataListFile, writeDataFile } from \"./detail\";\r\n\r\nconst isCommonEvent = (data: unknown): data is Data_CommonEvent => {\r\n  return !!data && typeof data === \"object\" && \"id\" in data;\r\n};\r\n\r\nexport const ensureCommonEventDataPath = (\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string\r\n): string => {\r\n  return ensureDataPath(pathLib, basePath, FILENAME_COMMON_EVENTS);\r\n};\r\n\r\nexport const writeRmmzCommonEventData = (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_WriteFile,\r\n  basePath: string,\r\n  commonEvents: Data_CommonEvent[],\r\n  space: number = 2\r\n): Promise<void> => {\r\n  const path: string = ensureCommonEventDataPath(pathLib, basePath);\r\n  return writeDataFile(fsLib, path, commonEvents, space);\r\n};\r\n\r\nexport const readRmmzCommonEventData = async (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_ReadFile,\r\n  basePath: string\r\n): Promise<Data_CommonEvent[]> => {\r\n  const path: string = ensureCommonEventDataPath(pathLib, basePath);\r\n  return readRmmzDataListFile<Data_CommonEvent>(fsLib, path, isCommonEvent);\r\n};\r\n","import type { Data_MapInfo } from \"@sigureya/rpgtypes\";\r\nimport { FILENAME_MAP_INFOS, isDataMapInfo } from \"@sigureya/rpgtypes\";\r\nimport { ensureDataPath, writeDataFile, readRmmzDataListFile } from \"./detail\";\r\nimport type {\r\n  PathLib_Resolve,\r\n  FsLib_WriteFile,\r\n  FsLib_ReadFile,\r\n} from \"./detail/libTypes\";\r\n\r\nexport const ensureMapInfoDataPath = (\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string\r\n): string => {\r\n  return ensureDataPath(pathLib, basePath, FILENAME_MAP_INFOS);\r\n};\r\n\r\nexport const writeRmmzMapInfoData = (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_WriteFile,\r\n  basePath: string,\r\n  mapInfos: Data_MapInfo[],\r\n  space: number = 2\r\n): Promise<void> => {\r\n  const path: string = ensureMapInfoDataPath(pathLib, basePath);\r\n  return writeDataFile(fsLib, path, mapInfos, space);\r\n};\r\n\r\nexport const readRmmzMapInfoData = async (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_ReadFile,\r\n  basePath: string\r\n): Promise<Data_MapInfo[]> => {\r\n  const path: string = ensureMapInfoDataPath(pathLib, basePath);\r\n  return readRmmzDataListFile<Data_MapInfo>(fsLib, path, isDataMapInfo);\r\n};\r\n","import type { Data_Map, MapFileInfo } from \"@sigureya/rpgtypes\";\r\nimport {\r\n  isDataMapInfo,\r\n  makeMapData,\r\n  type Data_MapInfo,\r\n} from \"@sigureya/rpgtypes\";\r\nimport type { FsLib_ReadFile, PathLib_Resolve } from \"./detail/libTypes\";\r\nimport type FsLib from \"node:fs/promises\";\r\nimport type { Dirent } from \"node:fs\";\r\nimport { readRmmzMapInfoData } from \"./mapInfo\";\r\ntype InfoType = Pick<Data_MapInfo, \"name\" | \"id\">;\r\n\r\nexport const isMapFileName = (filename: string) => {\r\n  return filename.startsWith(\"Map\") && filename.endsWith(\".json\");\r\n};\r\n\r\nexport const listupMapFiles = async (\r\n  fsLib: Pick<typeof FsLib, \"readdir\">,\r\n  resolvedPath: string\r\n): Promise<Dirent[]> => {\r\n  return (await fsLib.readdir(resolvedPath, { withFileTypes: true })).filter(\r\n    (dirent) => dirent.isFile() && isMapFileName(dirent.name)\r\n  );\r\n};\r\n\r\nconst makeMapFileName = (mapId: number) => {\r\n  return `Map${String(mapId).padStart(3, \"0\")}.json` as const;\r\n};\r\n\r\nexport const resolveMapFilePath = (\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string,\r\n  mapId: number\r\n) => {\r\n  const fileName = makeMapFileName(mapId);\r\n  const filePath = pathLib.resolve(basePath, fileName);\r\n  return { filePath, fileName };\r\n};\r\n\r\nexport type ResultOfReadMapFile = MapFileInfo<Data_Map | undefined>;\r\nconst validateAndNormalizeMapData = (data: unknown): Data_Map => {\r\n  // データの不足分を補い、余計なデータを排除する処理\r\n  return makeMapData(data as {});\r\n};\r\n\r\nexport const readMapFileFromInfo = async (\r\n  fsLib: FsLib_ReadFile,\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string,\r\n  info: InfoType\r\n): Promise<ResultOfReadMapFile> => {\r\n  const { filePath, fileName } = resolveMapFilePath(pathLib, basePath, info.id);\r\n\r\n  try {\r\n    const text = await fsLib.readFile(filePath, \"utf-8\");\r\n    const mapData: Data_Map = validateAndNormalizeMapData(JSON.parse(text));\r\n    return {\r\n      filename: fileName,\r\n      map: mapData,\r\n      editingName: info.name,\r\n    };\r\n  } catch {\r\n    return {\r\n      filename: fileName,\r\n      editingName: info.name,\r\n      map: undefined,\r\n    };\r\n  }\r\n};\r\n\r\nexport const mappingAllMapFiles = async <T>(\r\n  fsLib: FsLib_ReadFile,\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string,\r\n  fn: (data: ResultOfReadMapFile) => T,\r\n  infos?: ReadonlyArray<Data_MapInfo | null>\r\n): Promise<Promise<T>[]> => {\r\n  const list = infos ?? (await readRmmzMapInfoData(pathLib, fsLib, basePath));\r\n  return list\r\n    .filter((item) => !!item && isDataMapInfo(item))\r\n    .map(async (info: Data_MapInfo) => {\r\n      const mapFileInfo = await readMapFileFromInfo(\r\n        fsLib,\r\n        pathLib,\r\n        basePath,\r\n        info\r\n      );\r\n      return fn(mapFileInfo);\r\n    });\r\n};\r\n","import type PathLib from \"node:path\";\r\nimport type FsLib from \"node:fs/promises\";\r\nimport type { DataMapper } from \"./data/types\";\r\nimport {\r\n  SRC_DATA_ACTOR,\r\n  SRC_DATA_ARMOR,\r\n  SRC_DATA_CLASS,\r\n  SRC_DATA_COMMON_EVNET,\r\n  SRC_DATA_ENEMY,\r\n  SRC_DATA_ITEMS,\r\n  SRC_DATA_SKILL,\r\n  SRC_DATA_STATE,\r\n  SRC_DATA_TROOP,\r\n  SRC_DATA_WEAPON,\r\n} from \"@sigureya/rpgtypes\";\r\nimport {\r\n  readRmmzActorData,\r\n  readRmmzArmorData,\r\n  readRmmzClassData,\r\n  readRmmzCommonEventData,\r\n  readRmmzEnemyData,\r\n  readRmmzItemData,\r\n  readRmmzSkillData,\r\n  readRmmzStateData,\r\n  readRmmzTroopData,\r\n  readRmmzWeaponData,\r\n} from \"./data\";\r\ntype FsLib_ReadFile = Pick<typeof FsLib, \"readFile\">;\r\ntype PathLib_Resolve = Pick<typeof PathLib, \"resolve\" | \"sep\">;\r\n\r\nexport const dispatchHandlers = async <T>(\r\n  fsLib: FsLib_ReadFile,\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string,\r\n  dataMapper: Partial<DataMapper<T>>\r\n): Promise<Record<keyof DataMapper<T>, T | undefined>> => {\r\n  return {\r\n    actor: dataMapper.actor\r\n      ? dataMapper.actor(\r\n          await readRmmzActorData(pathLib, fsLib, basePath),\r\n          SRC_DATA_ACTOR\r\n        )\r\n      : undefined,\r\n    armor: dataMapper.armor\r\n      ? dataMapper.armor(\r\n          await readRmmzArmorData(pathLib, fsLib, basePath),\r\n          SRC_DATA_ARMOR\r\n        )\r\n      : undefined,\r\n\r\n    enemy: dataMapper.enemy\r\n      ? dataMapper.enemy(\r\n          await readRmmzEnemyData(pathLib, fsLib, basePath),\r\n          SRC_DATA_ENEMY\r\n        )\r\n      : undefined,\r\n    class: dataMapper.class\r\n      ? dataMapper.class(\r\n          await readRmmzClassData(pathLib, fsLib, basePath),\r\n          SRC_DATA_CLASS\r\n        )\r\n      : undefined,\r\n    item: dataMapper.item\r\n      ? dataMapper.item(\r\n          await readRmmzItemData(pathLib, fsLib, basePath),\r\n          SRC_DATA_ITEMS\r\n        )\r\n      : undefined,\r\n\r\n    skill: dataMapper.skill\r\n      ? dataMapper.skill(\r\n          await readRmmzSkillData(pathLib, fsLib, basePath),\r\n          SRC_DATA_SKILL\r\n        )\r\n      : undefined,\r\n\r\n    state: dataMapper.state\r\n      ? dataMapper.state(\r\n          await readRmmzStateData(pathLib, fsLib, basePath),\r\n          SRC_DATA_STATE\r\n        )\r\n      : undefined,\r\n    weapon: dataMapper.weapon\r\n      ? dataMapper.weapon(\r\n          await readRmmzWeaponData(pathLib, fsLib, basePath),\r\n          SRC_DATA_WEAPON\r\n        )\r\n      : undefined,\r\n\r\n    troop: dataMapper.troop\r\n      ? dataMapper.troop(\r\n          await readRmmzTroopData(pathLib, fsLib, basePath),\r\n          SRC_DATA_TROOP\r\n        )\r\n      : undefined,\r\n    commonEvent: dataMapper.commonEvent\r\n      ? dataMapper.commonEvent(\r\n          await readRmmzCommonEventData(pathLib, fsLib, basePath),\r\n          SRC_DATA_COMMON_EVNET\r\n        )\r\n      : undefined,\r\n  };\r\n};\r\n","import {\r\n  writeRmmzActorData,\r\n  writeRmmzEnemyData,\r\n  writeRmmzArmorData,\r\n  writeRmmzWeaponData,\r\n  writeRmmzClassData,\r\n  writeRmmzItemData,\r\n  writeRmmzSkillData,\r\n  writeRmmzStateData,\r\n} from \"./data\";\r\nimport type { FsLib_WriteFile, PathLib_Resolve } from \"./data/detail/libTypes\";\r\nimport type { DataTable } from \"./data/types\";\r\n\r\nconst ggg = (fm: () => Promise<void>) => {\r\n  try {\r\n    return fm();\r\n  } catch {\r\n    return Promise.resolve();\r\n  }\r\n};\r\n\r\nexport const writeDataFiles = async (\r\n  fsLib: FsLib_WriteFile,\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string,\r\n  data: DataTable\r\n): Promise<void[]> => {\r\n  return Promise.all([\r\n    ggg(() => writeRmmzActorData(pathLib, fsLib, basePath, data.actors)),\r\n    ggg(() => writeRmmzEnemyData(pathLib, fsLib, basePath, data.enemies)),\r\n    ggg(() => writeRmmzArmorData(pathLib, fsLib, basePath, data.armors)),\r\n    ggg(() => writeRmmzWeaponData(pathLib, fsLib, basePath, data.weapons)),\r\n    ggg(() => writeRmmzClassData(pathLib, fsLib, basePath, data.classes)),\r\n    ggg(() => writeRmmzItemData(pathLib, fsLib, basePath, data.items)),\r\n    ggg(() => writeRmmzSkillData(pathLib, fsLib, basePath, data.skills)),\r\n    ggg(() => writeRmmzStateData(pathLib, fsLib, basePath, data.states)),\r\n  ]);\r\n};\r\n"],"names":["denormalizeIdentifiedItems","items","ensureDataPath","pathLib","basePath","fileName","FOLDER_DATA","validateAndFilterItems","list","fn","item","writeDataFile","fsLib","path","data","space","readRmmzDataListFile","resolvedPath","validateFn","jsonText","obj","ensureActorDataPath","FILENAME_ACTORS","writeRmmzActorData","actors","readRmmzActorData","isDataActor","ensureArmorDataPath","FILENAME_ARMORS","writeRmmzArmorData","armors","readRmmzArmorData","isDataArmor","ensureClassDataPath","FILENAME_CLASSES","writeRmmzClassData","readRmmzClassData","isDataClass","ensureEnemyDataPath","FILENAME_ENEMIES","writeRmmzEnemyData","enemies","readRmmzEnemyData","isDataEnemy","ensureItemDataPath","FILENAME_ITEMS","writeRmmzItemData","readRmmzItemData","isDataItem","ensureSkillDataPath","FILENAME_SKILLS","writeRmmzSkillData","skills","readRmmzSkillData","isDataSkill","ensureStateDataPath","FILENAME_STATES","writeRmmzStateData","states","readRmmzStateData","isDataState","ensureWeaponDataPath","FILENAME_WEAPONS","writeRmmzWeaponData","weapons","readRmmzWeaponData","isDataWeapon","isDataTroop","ensureTroopDataPath","FILENAME_TROOPS","writeRmmzTroopData","troops","readRmmzTroopData","isCommonEvent","ensureCommonEventDataPath","FILENAME_COMMON_EVENTS","writeRmmzCommonEventData","commonEvents","readRmmzCommonEventData","ensureMapInfoDataPath","FILENAME_MAP_INFOS","writeRmmzMapInfoData","mapInfos","readRmmzMapInfoData","isDataMapInfo","isMapFileName","filename","listupMapFiles","dirent","makeMapFileName","mapId","resolveMapFilePath","validateAndNormalizeMapData","makeMapData","readMapFileFromInfo","info","filePath","text","mapData","mappingAllMapFiles","infos","mapFileInfo","dispatchHandlers","dataMapper","SRC_DATA_ACTOR","SRC_DATA_ARMOR","SRC_DATA_ENEMY","SRC_DATA_CLASS","SRC_DATA_ITEMS","SRC_DATA_SKILL","SRC_DATA_STATE","SRC_DATA_WEAPON","SRC_DATA_TROOP","SRC_DATA_COMMON_EVNET","ggg","fm","writeDataFiles"],"mappings":"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"}