{"version":3,"file":"rpgFolder.es.js","sources":["../src/libs/folder/data/features/detail/detail.ts","../src/libs/folder/data/features/actor.ts","../src/libs/folder/data/features/armor.ts","../src/libs/folder/data/features/class.ts","../src/libs/folder/data/features/enemy.ts","../src/libs/folder/data/features/item.ts","../src/libs/folder/data/features/skill.ts","../src/libs/folder/data/features/state.ts","../src/libs/folder/data/features/weapon.ts","../src/libs/folder/data/features/troop.ts","../src/libs/folder/data/features/commonEvent.ts","../src/libs/folder/data/features/mapInfo.ts","../src/libs/folder/data/features/map.ts","../src/libs/folder/data/features/system.ts","../src/libs/folder/data/multiRead.ts","../src/libs/folder/multiWrite.ts","../src/libs/folder/asset/ensure/ensure.ts","../src/libs/folder/asset/audioPath.ts","../src/libs/folder/asset/imagePath.ts","../src/libs/folder/asset/constants/audios.ts","../src/libs/folder/asset/constants/images.ts","../src/libs/folder/asset/makeFolder.ts","../src/libs/folder/asset/validate.ts","../src/libs/folder/asset/listup.ts"],"sourcesContent":["import { FOLDER_DATA, type IdentifiedItems } from \"@sigureya/rpgtypes\";\r\nimport type {\r\n  FsLib_WriteFile,\r\n  FsLib_ReadFile,\r\n  PathLib_Resolve,\r\n} from \"./libTypes\";\r\n\r\nexport const normalizeIdentifiedItems = <T>(items: IdentifiedItems<T>): T[] => {\r\n  return items.filter((item): item is T => item !== null);\r\n};\r\n\r\nexport const denormalizeIdentifiedItems = <T>(\r\n  items: T[]\r\n): IdentifiedItems<T> => {\r\n  return [null, ...items];\r\n};\r\n\r\nexport const ensureDataFolderPath = (\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string\r\n): string => {\r\n  return ensureDataPath(pathLib, basePath, \"\");\r\n};\r\n\r\nexport const ensureDataPath = (\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string,\r\n  fileName: string\r\n): string => {\r\n  return basePath.endsWith(`${pathLib.sep}${FOLDER_DATA}`)\r\n    ? pathLib.resolve(basePath, fileName)\r\n    : pathLib.resolve(basePath, FOLDER_DATA, fileName);\r\n};\r\n\r\nexport const validateAndFilterItems = <T>(\r\n  list: unknown,\r\n  fn: (data: unknown) => data is T\r\n): T[] => {\r\n  if (Array.isArray(list)) {\r\n    return list.filter((item) => fn(item));\r\n  }\r\n  throw new Error(\"Invalid data format\");\r\n};\r\n\r\nexport const writeDataFile = async <T>(\r\n  fsLib: FsLib_WriteFile,\r\n  path: string,\r\n  data: T[],\r\n  space: number = 2\r\n): Promise<void> => {\r\n  const list: [null, ...T[]] = denormalizeIdentifiedItems(data);\r\n  return fsLib.writeFile(path, JSON.stringify(list, null, space), \"utf-8\");\r\n};\r\n\r\nexport const readDataFile = async <T>(\r\n  fsLib: FsLib_ReadFile,\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string,\r\n  fileName: string,\r\n  validateFn: (data: unknown) => data is T\r\n): Promise<T[]> => {\r\n  const path: string = ensureDataPath(pathLib, basePath, fileName);\r\n  return readRmmzDataListFile(fsLib, path, validateFn);\r\n};\r\n\r\nexport const readRmmzDataListFile = async <T>(\r\n  fsLib: FsLib_ReadFile,\r\n  resolvedPath: string,\r\n  validateFn: (data: unknown) => data is T\r\n): Promise<T[]> => {\r\n  const jsonText: string = await fsLib.readFile(resolvedPath, \"utf-8\");\r\n  const obj = JSON.parse(jsonText);\r\n  return validateAndFilterItems(obj, validateFn);\r\n};\r\n","import {\r\n  FILENAME_ACTORS,\r\n  isDataActor,\r\n  type Data_Actor,\r\n} from \"@sigureya/rpgtypes\";\r\nimport type {\r\n  FsLib_ReadFile,\r\n  FsLib_WriteFile,\r\n  PathLib_Resolve,\r\n} from \"./detail/libTypes\";\r\nimport { ensureDataPath, readRmmzDataListFile, writeDataFile } from \"./detail\";\r\n\r\nexport const ensureActorDataPath = (\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string\r\n): string => {\r\n  return ensureDataPath(pathLib, basePath, FILENAME_ACTORS);\r\n};\r\n\r\nexport const writeRmmzActorData = (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_WriteFile,\r\n  basePath: string,\r\n  actors: Data_Actor[],\r\n  space: number = 2\r\n): Promise<void> => {\r\n  const path: string = ensureActorDataPath(pathLib, basePath);\r\n  return writeDataFile(fsLib, path, actors, space);\r\n};\r\n\r\nexport const readRmmzActorData = async (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_ReadFile,\r\n  basePath: string\r\n): Promise<Data_Actor[]> => {\r\n  const path: string = ensureActorDataPath(pathLib, basePath);\r\n  return readRmmzDataListFile<Data_Actor>(fsLib, path, isDataActor);\r\n};\r\n","import {\r\n  FILENAME_ARMORS,\r\n  isDataArmor,\r\n  type Data_Armor,\r\n} from \"@sigureya/rpgtypes\";\r\nimport type {\r\n  FsLib_ReadFile,\r\n  FsLib_WriteFile,\r\n  PathLib_Resolve,\r\n} from \"./detail/libTypes\";\r\nimport { ensureDataPath, readRmmzDataListFile, writeDataFile } from \"./detail\";\r\n\r\nexport const ensureArmorDataPath = (\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string\r\n): string => {\r\n  return ensureDataPath(pathLib, basePath, FILENAME_ARMORS);\r\n};\r\n\r\nexport const writeRmmzArmorData = (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_WriteFile,\r\n  basePath: string,\r\n  armors: Data_Armor[],\r\n  space: number = 2\r\n): Promise<void> => {\r\n  const path: string = ensureArmorDataPath(pathLib, basePath);\r\n  return writeDataFile(fsLib, path, armors, space);\r\n};\r\n\r\nexport const readRmmzArmorData = async (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_ReadFile,\r\n  basePath: string\r\n): Promise<Data_Armor[]> => {\r\n  const path: string = ensureArmorDataPath(pathLib, basePath);\r\n  return readRmmzDataListFile<Data_Armor>(fsLib, path, isDataArmor);\r\n};\r\n","import type {\r\n  FsLib_ReadFile,\r\n  FsLib_WriteFile,\r\n  PathLib_Resolve,\r\n} from \"./detail/libTypes\";\r\nimport {\r\n  FILENAME_CLASSES,\r\n  isDataClass,\r\n  type Data_Class,\r\n} from \"@sigureya/rpgtypes\";\r\nimport { ensureDataPath, readRmmzDataListFile, writeDataFile } from \"./detail\";\r\n\r\nexport const ensureClassDataPath = (\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string\r\n): string => {\r\n  return ensureDataPath(pathLib, basePath, FILENAME_CLASSES);\r\n};\r\n\r\nexport const writeRmmzClassData = (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_WriteFile,\r\n  basePath: string,\r\n  armors: Data_Class[],\r\n  space: number = 2\r\n): Promise<void> => {\r\n  const path: string = ensureClassDataPath(pathLib, basePath);\r\n  return writeDataFile(fsLib, path, armors, space);\r\n};\r\n\r\nexport const readRmmzClassData = async (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_ReadFile,\r\n  basePath: string\r\n): Promise<Data_Class[]> => {\r\n  const path: string = ensureClassDataPath(pathLib, basePath);\r\n  return readRmmzDataListFile<Data_Class>(fsLib, path, isDataClass);\r\n};\r\n","import {\r\n  FILENAME_ENEMIES,\r\n  isDataEnemy,\r\n  type Data_Enemy,\r\n} from \"@sigureya/rpgtypes\";\r\nimport type {\r\n  FsLib_ReadFile,\r\n  FsLib_WriteFile,\r\n  PathLib_Resolve,\r\n} from \"./detail/libTypes\";\r\nimport { ensureDataPath, readRmmzDataListFile, writeDataFile } from \"./detail\";\r\n\r\nexport const ensureEnemyDataPath = (\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string\r\n): string => {\r\n  return ensureDataPath(pathLib, basePath, FILENAME_ENEMIES);\r\n};\r\n\r\nexport const writeRmmzEnemyData = (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_WriteFile,\r\n  basePath: string,\r\n  enemies: Data_Enemy[],\r\n  space: number = 2\r\n): Promise<void> => {\r\n  const path: string = ensureEnemyDataPath(pathLib, basePath);\r\n  return writeDataFile(fsLib, path, enemies, space);\r\n};\r\n\r\nexport const readRmmzEnemyData = async (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_ReadFile,\r\n  basePath: string\r\n): Promise<Data_Enemy[]> => {\r\n  const path: string = ensureEnemyDataPath(pathLib, basePath);\r\n  return readRmmzDataListFile<Data_Enemy>(fsLib, path, isDataEnemy);\r\n};\r\n","import { FILENAME_ITEMS, isDataItem, type Data_Item } from \"@sigureya/rpgtypes\";\r\nimport type {\r\n  FsLib_ReadFile,\r\n  FsLib_WriteFile,\r\n  PathLib_Resolve,\r\n} from \"./detail/libTypes\";\r\nimport { ensureDataPath, readRmmzDataListFile, writeDataFile } from \"./detail\";\r\n\r\nexport const ensureItemDataPath = (\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string\r\n): string => {\r\n  return ensureDataPath(pathLib, basePath, FILENAME_ITEMS);\r\n};\r\n\r\nexport const writeRmmzItemData = (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_WriteFile,\r\n  basePath: string,\r\n  items: Data_Item[],\r\n  space: number = 2\r\n): Promise<void> => {\r\n  const path: string = ensureItemDataPath(pathLib, basePath);\r\n  return writeDataFile(fsLib, path, items, space);\r\n};\r\n\r\nexport const readRmmzItemData = async (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_ReadFile,\r\n  basePath: string\r\n): Promise<Data_Item[]> => {\r\n  const path: string = ensureItemDataPath(pathLib, basePath);\r\n  return readRmmzDataListFile<Data_Item>(fsLib, path, isDataItem);\r\n};\r\n","import {\r\n  FILENAME_SKILLS,\r\n  isDataSkill,\r\n  type Data_Skill,\r\n} from \"@sigureya/rpgtypes\";\r\nimport type {\r\n  FsLib_ReadFile,\r\n  FsLib_WriteFile,\r\n  PathLib_Resolve,\r\n} from \"./detail/libTypes\";\r\nimport { ensureDataPath, readRmmzDataListFile, writeDataFile } from \"./detail\";\r\n\r\nexport const ensureSkillDataPath = (\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string\r\n): string => {\r\n  return ensureDataPath(pathLib, basePath, FILENAME_SKILLS);\r\n};\r\n\r\nexport const writeRmmzSkillData = (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_WriteFile,\r\n  basePath: string,\r\n  skills: Data_Skill[],\r\n  space: number = 2\r\n): Promise<void> => {\r\n  const path: string = ensureSkillDataPath(pathLib, basePath);\r\n  return writeDataFile(fsLib, path, skills, space);\r\n};\r\n\r\nexport const readRmmzSkillData = async (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_ReadFile,\r\n  basePath: string\r\n): Promise<Data_Skill[]> => {\r\n  const path: string = ensureSkillDataPath(pathLib, basePath);\r\n  return readRmmzDataListFile<Data_Skill>(fsLib, path, isDataSkill);\r\n};\r\n","import {\r\n  FILENAME_STATES,\r\n  isDataState,\r\n  type Data_State,\r\n} from \"@sigureya/rpgtypes\";\r\nimport type {\r\n  FsLib_ReadFile,\r\n  FsLib_WriteFile,\r\n  PathLib_Resolve,\r\n} from \"./detail/libTypes\";\r\nimport { ensureDataPath, readRmmzDataListFile, writeDataFile } from \"./detail\";\r\n\r\nexport const ensureStateDataPath = (\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string\r\n): string => {\r\n  return ensureDataPath(pathLib, basePath, FILENAME_STATES);\r\n};\r\n\r\nexport const writeRmmzStateData = (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_WriteFile,\r\n  basePath: string,\r\n  states: Data_State[],\r\n  space: number = 2\r\n): Promise<void> => {\r\n  const path: string = ensureStateDataPath(pathLib, basePath);\r\n  return writeDataFile(fsLib, path, states, space);\r\n};\r\n\r\nexport const readRmmzStateData = async (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_ReadFile,\r\n  basePath: string\r\n): Promise<Data_State[]> => {\r\n  const path: string = ensureStateDataPath(pathLib, basePath);\r\n  return readRmmzDataListFile<Data_State>(fsLib, path, isDataState);\r\n};\r\n","import {\r\n  FILENAME_WEAPONS,\r\n  isDataWeapon,\r\n  type Data_Weapon,\r\n} from \"@sigureya/rpgtypes\";\r\nimport type {\r\n  FsLib_ReadFile,\r\n  FsLib_WriteFile,\r\n  PathLib_Resolve,\r\n} from \"./detail/libTypes\";\r\nimport { ensureDataPath, readRmmzDataListFile, writeDataFile } from \"./detail\";\r\n\r\nexport const ensureWeaponDataPath = (\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string\r\n): string => {\r\n  return ensureDataPath(pathLib, basePath, FILENAME_WEAPONS);\r\n};\r\n\r\nexport const writeRmmzWeaponData = (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_WriteFile,\r\n  basePath: string,\r\n  weapons: Data_Weapon[],\r\n  space: number = 2\r\n): Promise<void> => {\r\n  const path: string = ensureWeaponDataPath(pathLib, basePath);\r\n  return writeDataFile(fsLib, path, weapons, space);\r\n};\r\n\r\nexport const readRmmzWeaponData = async (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_ReadFile,\r\n  basePath: string\r\n): Promise<Data_Weapon[]> => {\r\n  const path: string = ensureWeaponDataPath(pathLib, basePath);\r\n  return readRmmzDataListFile<Data_Weapon>(fsLib, path, isDataWeapon);\r\n};\r\n","import type {\r\n  FsLib_ReadFile,\r\n  FsLib_WriteFile,\r\n  PathLib_Resolve,\r\n} from \"./detail/libTypes\";\r\nimport { ensureDataPath, readRmmzDataListFile, writeDataFile } from \"./detail\";\r\n\r\nimport { FILENAME_TROOPS, type Data_Troop } from \"@sigureya/rpgtypes\";\r\n\r\nconst isDataTroop = (data: unknown): data is Data_Troop => {\r\n  return (\r\n    typeof data === \"object\" &&\r\n    data !== null &&\r\n    \"id\" in data &&\r\n    typeof (data as Data_Troop).id === \"number\"\r\n  );\r\n};\r\n\r\nexport const ensureTroopDataPath = (\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string\r\n): string => {\r\n  return ensureDataPath(pathLib, basePath, FILENAME_TROOPS);\r\n};\r\n\r\nexport const writeRmmzTroopData = (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_WriteFile,\r\n  basePath: string,\r\n  troops: Data_Troop[],\r\n  space: number = 2\r\n): Promise<void> => {\r\n  const path: string = ensureTroopDataPath(pathLib, basePath);\r\n  return writeDataFile(fsLib, path, troops, space);\r\n};\r\n\r\nexport const readRmmzTroopData = async (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_ReadFile,\r\n  basePath: string\r\n): Promise<Data_Troop[]> => {\r\n  const path: string = ensureTroopDataPath(pathLib, basePath);\r\n  return readRmmzDataListFile<Data_Troop>(fsLib, path, isDataTroop);\r\n};\r\n","import {\r\n  FILENAME_COMMON_EVENTS,\r\n  type Data_CommonEvent,\r\n} from \"@sigureya/rpgtypes\";\r\nimport type {\r\n  FsLib_ReadFile,\r\n  FsLib_WriteFile,\r\n  PathLib_Resolve,\r\n} from \"./detail/libTypes\";\r\nimport { ensureDataPath, readRmmzDataListFile, writeDataFile } from \"./detail\";\r\n\r\nconst isCommonEvent = (data: unknown): data is Data_CommonEvent => {\r\n  return !!data && typeof data === \"object\" && \"id\" in data;\r\n};\r\n\r\nexport const ensureCommonEventDataPath = (\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string\r\n): string => {\r\n  return ensureDataPath(pathLib, basePath, FILENAME_COMMON_EVENTS);\r\n};\r\n\r\nexport const writeRmmzCommonEventData = (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_WriteFile,\r\n  basePath: string,\r\n  commonEvents: Data_CommonEvent[],\r\n  space: number = 2\r\n): Promise<void> => {\r\n  const path: string = ensureCommonEventDataPath(pathLib, basePath);\r\n  return writeDataFile(fsLib, path, commonEvents, space);\r\n};\r\n\r\nexport const readRmmzCommonEventData = async (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_ReadFile,\r\n  basePath: string\r\n): Promise<Data_CommonEvent[]> => {\r\n  const path: string = ensureCommonEventDataPath(pathLib, basePath);\r\n  return readRmmzDataListFile<Data_CommonEvent>(fsLib, path, isCommonEvent);\r\n};\r\n","import type { Data_MapInfo } from \"@sigureya/rpgtypes\";\r\nimport { FILENAME_MAP_INFOS, isDataMapInfo } from \"@sigureya/rpgtypes\";\r\nimport { ensureDataPath, writeDataFile, readRmmzDataListFile } from \"./detail\";\r\nimport type {\r\n  PathLib_Resolve,\r\n  FsLib_WriteFile,\r\n  FsLib_ReadFile,\r\n} from \"./detail/libTypes\";\r\n\r\nexport const ensureMapInfoDataPath = (\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string\r\n): string => {\r\n  return ensureDataPath(pathLib, basePath, FILENAME_MAP_INFOS);\r\n};\r\n\r\nexport const writeRmmzMapInfoData = (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_WriteFile,\r\n  basePath: string,\r\n  mapInfos: Data_MapInfo[],\r\n  space: number = 2\r\n): Promise<void> => {\r\n  const path: string = ensureMapInfoDataPath(pathLib, basePath);\r\n  return writeDataFile(fsLib, path, mapInfos, space);\r\n};\r\n\r\nexport const readRmmzMapInfoData = async (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_ReadFile,\r\n  basePath: string\r\n): Promise<Data_MapInfo[]> => {\r\n  const path: string = ensureMapInfoDataPath(pathLib, basePath);\r\n  return readRmmzDataListFile<Data_MapInfo>(fsLib, path, isDataMapInfo);\r\n};\r\n","import type { Data_Map, MapFileInfo } from \"@sigureya/rpgtypes\";\r\nimport {\r\n  isDataMapInfo,\r\n  makeMapData,\r\n  type Data_MapInfo,\r\n} from \"@sigureya/rpgtypes\";\r\nimport type { FsLib_ReadFile, PathLib_Resolve } from \"./detail/libTypes\";\r\nimport type FsLib from \"node:fs/promises\";\r\nimport type { Dirent } from \"node:fs\";\r\nimport { readRmmzMapInfoData } from \"./mapInfo\";\r\ntype InfoType = Pick<Data_MapInfo, \"name\" | \"id\">;\r\n\r\nexport const isMapFileName = (filename: string) => {\r\n  return filename.startsWith(\"Map\") && filename.endsWith(\".json\");\r\n};\r\n\r\nexport const listupMapFiles = async (\r\n  fsLib: Pick<typeof FsLib, \"readdir\">,\r\n  resolvedPath: string\r\n): Promise<Dirent[]> => {\r\n  return (await fsLib.readdir(resolvedPath, { withFileTypes: true })).filter(\r\n    (dirent) => dirent.isFile() && isMapFileName(dirent.name)\r\n  );\r\n};\r\n\r\nconst makeMapFileName = (mapId: number) => {\r\n  return `Map${String(mapId).padStart(3, \"0\")}.json` as const;\r\n};\r\n\r\nexport const resolveMapFilePath = (\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string,\r\n  mapId: number\r\n) => {\r\n  const fileName = makeMapFileName(mapId);\r\n  const filePath = pathLib.resolve(basePath, fileName);\r\n  return { filePath, fileName };\r\n};\r\n\r\nexport type ResultOfReadMapFile = MapFileInfo<Data_Map | undefined>;\r\nconst validateAndNormalizeMapData = (data: unknown): Data_Map => {\r\n  // データの不足分を補い、余計なデータを排除する処理\r\n  return makeMapData(data as {});\r\n};\r\n\r\nexport const readMapFileFromInfo = async (\r\n  fsLib: FsLib_ReadFile,\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string,\r\n  info: InfoType\r\n): Promise<ResultOfReadMapFile> => {\r\n  const { filePath, fileName } = resolveMapFilePath(pathLib, basePath, info.id);\r\n\r\n  try {\r\n    const text = await fsLib.readFile(filePath, \"utf-8\");\r\n    const mapData: Data_Map = validateAndNormalizeMapData(JSON.parse(text));\r\n    return {\r\n      filename: fileName,\r\n      map: mapData,\r\n      editingName: info.name,\r\n    };\r\n  } catch {\r\n    return {\r\n      filename: fileName,\r\n      editingName: info.name,\r\n      map: undefined,\r\n    };\r\n  }\r\n};\r\n\r\nexport const mappingAllMapFiles = async <T>(\r\n  fsLib: FsLib_ReadFile,\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string,\r\n  fn: (data: ResultOfReadMapFile) => T,\r\n  infos?: ReadonlyArray<Data_MapInfo | null>\r\n): Promise<Promise<T>[]> => {\r\n  const list = infos ?? (await readRmmzMapInfoData(pathLib, fsLib, basePath));\r\n  return list\r\n    .filter((item) => !!item && isDataMapInfo(item))\r\n    .map(async (info: Data_MapInfo) => {\r\n      const mapFileInfo = await readMapFileFromInfo(\r\n        fsLib,\r\n        pathLib,\r\n        basePath,\r\n        info\r\n      );\r\n      return fn(mapFileInfo);\r\n    });\r\n};\r\n","import type { Data_System } from \"@sigureya/rpgtypes\";\r\nimport { FILENAME_SYSTEM } from \"@sigureya/rpgtypes\";\r\nimport type {\r\n  FsLib_ReadFile,\r\n  FsLib_WriteFile,\r\n  PathLib_Resolve,\r\n} from \"./detail/libTypes\";\r\nimport { ensureDataPath } from \"./detail\";\r\n\r\n// 仮置き。型が複雑なので実装は後回し\r\nconst isDataSystem = (data: unknown): data is Data_System => {\r\n  return !!data;\r\n};\r\n\r\nexport const ensureSystemDataPath = (\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string\r\n): string => {\r\n  return ensureDataPath(pathLib, basePath, FILENAME_SYSTEM);\r\n};\r\n\r\nexport const writeRmmzSystemData = (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_WriteFile,\r\n  basePath: string,\r\n  system: Data_System,\r\n  space: number = 2\r\n): Promise<void> => {\r\n  const path: string = ensureSystemDataPath(pathLib, basePath);\r\n  const text = JSON.stringify(system, null, space);\r\n  return fsLib.writeFile(path, text, \"utf8\");\r\n};\r\n\r\nexport const readRmmzSystemData = async (\r\n  pathLib: PathLib_Resolve,\r\n  fsLib: FsLib_ReadFile,\r\n  basePath: string\r\n): Promise<Data_System> => {\r\n  const path: string = ensureSystemDataPath(pathLib, basePath);\r\n  const text = await fsLib.readFile(path, \"utf8\");\r\n  const data = JSON.parse(text);\r\n  if (!isDataSystem(data)) {\r\n    throw new Error(`Invalid system data: ${path}`);\r\n  }\r\n  return data;\r\n};\r\n","import type PathLib from \"node:path\";\r\nimport type FsLib from \"node:fs/promises\";\r\nimport type { DataMapper } from \"./features/types\";\r\nimport {\r\n  SRC_DATA_ACTOR,\r\n  SRC_DATA_ARMOR,\r\n  SRC_DATA_CLASS,\r\n  SRC_DATA_COMMON_EVNET,\r\n  SRC_DATA_ENEMY,\r\n  SRC_DATA_ITEMS,\r\n  SRC_DATA_SKILL,\r\n  SRC_DATA_STATE,\r\n  SRC_DATA_TROOP,\r\n  SRC_DATA_WEAPON,\r\n} from \"@sigureya/rpgtypes\";\r\nimport {\r\n  readRmmzActorData,\r\n  readRmmzArmorData,\r\n  readRmmzClassData,\r\n  readRmmzCommonEventData,\r\n  readRmmzEnemyData,\r\n  readRmmzItemData,\r\n  readRmmzSkillData,\r\n  readRmmzStateData,\r\n  readRmmzTroopData,\r\n  readRmmzWeaponData,\r\n} from \"./features\";\r\ntype FsLib_ReadFile = Pick<typeof FsLib, \"readFile\">;\r\ntype PathLib_Resolve = Pick<typeof PathLib, \"resolve\" | \"sep\">;\r\n\r\nexport const dispatchHandlers = async <T>(\r\n  fsLib: FsLib_ReadFile,\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string,\r\n  dataMapper: Partial<DataMapper<T>>\r\n): Promise<Record<keyof DataMapper<T>, T | undefined>> => {\r\n  return {\r\n    actor: dataMapper.actor\r\n      ? dataMapper.actor(\r\n          await readRmmzActorData(pathLib, fsLib, basePath),\r\n          SRC_DATA_ACTOR\r\n        )\r\n      : undefined,\r\n    armor: dataMapper.armor\r\n      ? dataMapper.armor(\r\n          await readRmmzArmorData(pathLib, fsLib, basePath),\r\n          SRC_DATA_ARMOR\r\n        )\r\n      : undefined,\r\n\r\n    enemy: dataMapper.enemy\r\n      ? dataMapper.enemy(\r\n          await readRmmzEnemyData(pathLib, fsLib, basePath),\r\n          SRC_DATA_ENEMY\r\n        )\r\n      : undefined,\r\n    class: dataMapper.class\r\n      ? dataMapper.class(\r\n          await readRmmzClassData(pathLib, fsLib, basePath),\r\n          SRC_DATA_CLASS\r\n        )\r\n      : undefined,\r\n    item: dataMapper.item\r\n      ? dataMapper.item(\r\n          await readRmmzItemData(pathLib, fsLib, basePath),\r\n          SRC_DATA_ITEMS\r\n        )\r\n      : undefined,\r\n\r\n    skill: dataMapper.skill\r\n      ? dataMapper.skill(\r\n          await readRmmzSkillData(pathLib, fsLib, basePath),\r\n          SRC_DATA_SKILL\r\n        )\r\n      : undefined,\r\n\r\n    state: dataMapper.state\r\n      ? dataMapper.state(\r\n          await readRmmzStateData(pathLib, fsLib, basePath),\r\n          SRC_DATA_STATE\r\n        )\r\n      : undefined,\r\n    weapon: dataMapper.weapon\r\n      ? dataMapper.weapon(\r\n          await readRmmzWeaponData(pathLib, fsLib, basePath),\r\n          SRC_DATA_WEAPON\r\n        )\r\n      : undefined,\r\n\r\n    troop: dataMapper.troop\r\n      ? dataMapper.troop(\r\n          await readRmmzTroopData(pathLib, fsLib, basePath),\r\n          SRC_DATA_TROOP\r\n        )\r\n      : undefined,\r\n    commonEvent: dataMapper.commonEvent\r\n      ? dataMapper.commonEvent(\r\n          await readRmmzCommonEventData(pathLib, fsLib, basePath),\r\n          SRC_DATA_COMMON_EVNET\r\n        )\r\n      : undefined,\r\n  };\r\n};\r\n","import {\r\n  writeRmmzActorData,\r\n  writeRmmzEnemyData,\r\n  writeRmmzArmorData,\r\n  writeRmmzWeaponData,\r\n  writeRmmzClassData,\r\n  writeRmmzItemData,\r\n  writeRmmzSkillData,\r\n  writeRmmzStateData,\r\n} from \"./data/features\";\r\nimport type {\r\n  FsLib_WriteFile,\r\n  PathLib_Resolve,\r\n} from \"./data/features/detail/libTypes\";\r\nimport type { DataTable } from \"./data/features/types\";\r\n\r\nconst ggg = (fm: () => Promise<void>) => {\r\n  try {\r\n    return fm();\r\n  } catch {\r\n    return Promise.resolve();\r\n  }\r\n};\r\n\r\nexport const writeDataFiles = async (\r\n  fsLib: FsLib_WriteFile,\r\n  pathLib: PathLib_Resolve,\r\n  basePath: string,\r\n  data: DataTable\r\n): Promise<void[]> => {\r\n  return Promise.all([\r\n    ggg(() => writeRmmzActorData(pathLib, fsLib, basePath, data.actors)),\r\n    ggg(() => writeRmmzEnemyData(pathLib, fsLib, basePath, data.enemies)),\r\n    ggg(() => writeRmmzArmorData(pathLib, fsLib, basePath, data.armors)),\r\n    ggg(() => writeRmmzWeaponData(pathLib, fsLib, basePath, data.weapons)),\r\n    ggg(() => writeRmmzClassData(pathLib, fsLib, basePath, data.classes)),\r\n    ggg(() => writeRmmzItemData(pathLib, fsLib, basePath, data.items)),\r\n    ggg(() => writeRmmzSkillData(pathLib, fsLib, basePath, data.skills)),\r\n    ggg(() => writeRmmzStateData(pathLib, fsLib, basePath, data.states)),\r\n  ]);\r\n};\r\n","import { FOLDER_AUDIO, FOLDER_IMG } from \"@sigureya/rpgtypes\";\r\nimport type PathLib from \"node:path\";\r\n\r\nexport const ensurePath = (\r\n  pathLib: typeof PathLib,\r\n  basePath: string,\r\n  folderName: string,\r\n  subFolderName: string\r\n): string => {\r\n  // basePathを正規化。末尾のセパレータを削除\r\n  const normalizedBasePath = pathLib.normalize(basePath);\r\n\r\n  if (normalizedBasePath.endsWith(`${pathLib.sep}${folderName}`)) {\r\n    // フォルダ名がbasePathに含まれている場合、basePathをそのまま使用\r\n    return pathLib.resolve(normalizedBasePath, subFolderName);\r\n  }\r\n\r\n  if (\r\n    normalizedBasePath.endsWith(\r\n      `${pathLib.sep}${folderName}${pathLib.sep}${subFolderName}`\r\n    )\r\n  ) {\r\n    return normalizedBasePath;\r\n  }\r\n\r\n  // サブフォルダを結合\r\n  return pathLib.resolve(basePath, folderName, subFolderName);\r\n};\r\n\r\nexport const validateFilePath = (filePath: string): boolean => {\r\n  // 相対パスの../と、拡張子の両方を禁止する\r\n  // ./xxは存在しないので巻き添えで禁止\r\n  return !filePath.includes(\".\");\r\n};\r\n\r\nconst buildAssetPath = (\r\n  pathLib: typeof PathLib,\r\n  basePath: string,\r\n  assetType: string,\r\n  subFolder: string,\r\n  filePath: string,\r\n  extension: string\r\n): string => {\r\n  if (!validateFilePath(filePath)) {\r\n    throw new Error(`Invalid file path: ${filePath}`);\r\n  }\r\n  const dir = ensurePath(pathLib, basePath, assetType, subFolder);\r\n\r\n  return pathLib.join(dir, `${filePath}.${extension}`);\r\n};\r\n\r\nexport const buildImageAssetPath = (\r\n  pathLib: typeof PathLib,\r\n  basePath: string,\r\n  subFolderName: string,\r\n  filePath: string\r\n) => {\r\n  return buildAssetPath(\r\n    pathLib,\r\n    basePath,\r\n    FOLDER_IMG,\r\n    subFolderName,\r\n    filePath,\r\n    \"png\"\r\n  );\r\n};\r\n\r\nexport const buildAudioAssetPath = (\r\n  pathLib: typeof PathLib,\r\n  basePath: string,\r\n  subFolderName: string,\r\n  filePath: string\r\n) => {\r\n  return buildAssetPath(\r\n    pathLib,\r\n    basePath,\r\n    FOLDER_AUDIO,\r\n    subFolderName,\r\n    filePath,\r\n    \"ogg\"\r\n  );\r\n};\r\n","import type PathLib from \"node:path\";\r\nimport {\r\n  FOLDER_AUDIO_BGM,\r\n  FOLDER_AUDIO_BGS,\r\n  FOLDER_AUDIO_ME,\r\n  FOLDER_AUDIO_SE,\r\n} from \"@sigureya/rpgtypes\";\r\nimport { buildImageAssetPath } from \"./ensure\";\r\n\r\nexport const buildBgmPath = (\r\n  pathLib: typeof PathLib,\r\n  basePath: string,\r\n  filePath: string\r\n): string => {\r\n  return buildImageAssetPath(pathLib, basePath, FOLDER_AUDIO_BGM, filePath);\r\n};\r\n\r\nexport const buildBgsPath = (\r\n  pathLib: typeof PathLib,\r\n  basePath: string,\r\n  filePath: string\r\n): string => {\r\n  return buildImageAssetPath(pathLib, basePath, FOLDER_AUDIO_BGS, filePath);\r\n};\r\n\r\nexport const buildMePath = (\r\n  pathLib: typeof PathLib,\r\n  basePath: string,\r\n  filePath: string\r\n): string => {\r\n  return buildImageAssetPath(pathLib, basePath, FOLDER_AUDIO_ME, filePath);\r\n};\r\n\r\nexport const buildSePath = (\r\n  pathLib: typeof PathLib,\r\n  basePath: string,\r\n  filePath: string\r\n): string => {\r\n  return buildImageAssetPath(pathLib, basePath, FOLDER_AUDIO_SE, filePath);\r\n};\r\n","import {\r\n  FOLDER_IMG_FACES,\r\n  FOLDER_IMG_PICTURES,\r\n  FOLDER_IMG_BATTLEBACK1,\r\n  FOLDER_IMG_BATTLEBACK2,\r\n  FOLDER_IMG_CHACTERS,\r\n  FOLDER_IMG_ENEMIES,\r\n  FOLDER_IMG_PARALLACES,\r\n  FOLDER_IMG_SV_ACTORS,\r\n  FOLDER_IMG_SV_ENEMIES,\r\n  FOLDER_IMG_SYSTEM,\r\n  FOLDER_IMG_TILESETS,\r\n  FOLDER_IMG_TITLES1,\r\n  FOLDER_IMG_TITLES2,\r\n} from \"@sigureya/rpgtypes\";\r\nimport type PathLib from \"node:path\";\r\nimport { buildImageAssetPath } from \"./ensure\";\r\n\r\nexport const buildFaceImagesPath = (\r\n  pathLib: typeof PathLib,\r\n  basePath: string,\r\n  filePath: string\r\n) => {\r\n  return buildImageAssetPath(pathLib, basePath, FOLDER_IMG_FACES, filePath);\r\n};\r\n\r\nexport const buildPicturesPath = (\r\n  pathLib: typeof PathLib,\r\n  basePath: string,\r\n  filePath: string\r\n): string => {\r\n  return buildImageAssetPath(pathLib, basePath, FOLDER_IMG_PICTURES, filePath);\r\n};\r\n\r\nexport const buildBattleback1Path = (\r\n  pathLib: typeof PathLib,\r\n  basePath: string,\r\n  filePath: string\r\n): string => {\r\n  return buildImageAssetPath(\r\n    pathLib,\r\n    basePath,\r\n    FOLDER_IMG_BATTLEBACK1,\r\n    filePath\r\n  );\r\n};\r\n\r\nexport const buildBattleback2Path = (\r\n  pathLib: typeof PathLib,\r\n  basePath: string,\r\n  filePath: string\r\n): string => {\r\n  return buildImageAssetPath(\r\n    pathLib,\r\n    basePath,\r\n    FOLDER_IMG_BATTLEBACK2,\r\n    filePath\r\n  );\r\n};\r\n\r\nexport const buildCharactersImagePath = (\r\n  pathLib: typeof PathLib,\r\n  basePath: string,\r\n  filePath: string\r\n): string => {\r\n  return buildImageAssetPath(pathLib, basePath, FOLDER_IMG_CHACTERS, filePath);\r\n};\r\n\r\nexport const buildEnemyImagesPath = (\r\n  pathLib: typeof PathLib,\r\n  basePath: string,\r\n  filePath: string\r\n): string => {\r\n  return buildImageAssetPath(pathLib, basePath, FOLDER_IMG_ENEMIES, filePath);\r\n};\r\n\r\nexport const buildParallacesPath = (\r\n  pathLib: typeof PathLib,\r\n  basePath: string,\r\n  filePath: string\r\n): string => {\r\n  return buildImageAssetPath(\r\n    pathLib,\r\n    basePath,\r\n    FOLDER_IMG_PARALLACES,\r\n    filePath\r\n  );\r\n};\r\n\r\nexport const buildSideViewActorsPath = (\r\n  pathLib: typeof PathLib,\r\n  basePath: string,\r\n  filePath: string\r\n): string => {\r\n  return buildImageAssetPath(pathLib, basePath, FOLDER_IMG_SV_ACTORS, filePath);\r\n};\r\n\r\nexport const buildSideVewEnemiesPath = (\r\n  pathLib: typeof PathLib,\r\n  basePath: string,\r\n  filePath: string\r\n): string => {\r\n  return buildImageAssetPath(\r\n    pathLib,\r\n    basePath,\r\n    FOLDER_IMG_SV_ENEMIES,\r\n    filePath\r\n  );\r\n};\r\n\r\nexport const buildSystemImagePath = (\r\n  pathLib: typeof PathLib,\r\n  basePath: string,\r\n  filePath: string\r\n): string => {\r\n  return buildImageAssetPath(pathLib, basePath, FOLDER_IMG_SYSTEM, filePath);\r\n};\r\n\r\nexport const buildTilesetImagesPath = (\r\n  pathLib: typeof PathLib,\r\n  basePath: string,\r\n  filePath: string\r\n): string => {\r\n  return buildImageAssetPath(pathLib, basePath, FOLDER_IMG_TILESETS, filePath);\r\n};\r\n\r\nexport const buildTitle1ImagesPath = (\r\n  pathLib: typeof PathLib,\r\n  basePath: string,\r\n  filePath: string\r\n): string => {\r\n  return buildImageAssetPath(pathLib, basePath, FOLDER_IMG_TITLES1, filePath);\r\n};\r\n\r\nexport const buildTitle2ImagesPath = (\r\n  pathLib: typeof PathLib,\r\n  basePath: string,\r\n  filePath: string\r\n): string => {\r\n  return buildImageAssetPath(pathLib, basePath, FOLDER_IMG_TITLES2, filePath);\r\n};\r\n","import {\r\n  FOLDER_AUDIO_BGM,\r\n  FOLDER_AUDIO_BGS,\r\n  FOLDER_AUDIO_ME,\r\n  FOLDER_AUDIO_SE,\r\n} from \"@sigureya/rpgtypes\";\r\n\r\nexport const AUDIO_FOLDES = [\r\n  FOLDER_AUDIO_BGM,\r\n  FOLDER_AUDIO_BGS,\r\n  FOLDER_AUDIO_ME,\r\n  FOLDER_AUDIO_SE,\r\n] as const satisfies readonly string[];\r\n","import {\r\n  FOLDER_IMG_FACES,\r\n  FOLDER_IMG_PICTURES,\r\n  FOLDER_IMG_BATTLEBACK1,\r\n  FOLDER_IMG_BATTLEBACK2,\r\n  FOLDER_IMG_CHACTERS,\r\n  FOLDER_IMG_ENEMIES,\r\n  FOLDER_IMG_PARALLACES,\r\n  FOLDER_IMG_SV_ACTORS,\r\n  FOLDER_IMG_SV_ENEMIES,\r\n  FOLDER_IMG_SYSTEM,\r\n  FOLDER_IMG_TILESETS,\r\n  FOLDER_IMG_TITLES1,\r\n  FOLDER_IMG_TITLES2,\r\n} from \"@sigureya/rpgtypes\";\r\n\r\nexport const IMAGE_FOLDERS = [\r\n  FOLDER_IMG_FACES,\r\n  FOLDER_IMG_PICTURES,\r\n  FOLDER_IMG_BATTLEBACK1,\r\n  FOLDER_IMG_BATTLEBACK2,\r\n  FOLDER_IMG_CHACTERS,\r\n  FOLDER_IMG_ENEMIES,\r\n  FOLDER_IMG_PARALLACES,\r\n  FOLDER_IMG_SV_ACTORS,\r\n  FOLDER_IMG_SV_ENEMIES,\r\n  FOLDER_IMG_SYSTEM,\r\n  FOLDER_IMG_TILESETS,\r\n  FOLDER_IMG_TITLES1,\r\n  FOLDER_IMG_TITLES2,\r\n] as const satisfies readonly string[]; // これで型がstring[]になる\r\n","import type PathLib from \"node:path\";\r\nimport type FsLib from \"node:fs/promises\";\r\nimport { ensurePath } from \"./ensure\";\r\nimport { FOLDER_DATA, FOLDER_IMG } from \"@sigureya/rpgtypes\";\r\nimport { AUDIO_FOLDES, IMAGE_FOLDERS } from \"./constants\";\r\n\r\nconst makeFolder = (\r\n  pathLib: typeof PathLib,\r\n  fsLib: typeof FsLib,\r\n  basePath: string,\r\n  folderName: string,\r\n  subFolderName: string\r\n): Promise<string | undefined> => {\r\n  const path = ensurePath(pathLib, basePath, folderName, subFolderName);\r\n  return fsLib.mkdir(path, {\r\n    recursive: true,\r\n  });\r\n};\r\n\r\nexport const makeImageFolders = (\r\n  pathLib: typeof PathLib,\r\n  fsLib: typeof FsLib,\r\n  basePath: string\r\n): Promise<string | undefined>[] => {\r\n  return IMAGE_FOLDERS.map((folder) => {\r\n    return makeFolder(pathLib, fsLib, basePath, FOLDER_IMG, folder);\r\n  });\r\n};\r\n\r\nexport const makeAudioFolders = (\r\n  pathLib: typeof PathLib,\r\n  fsLib: typeof FsLib,\r\n  basePath: string\r\n): Promise<string | undefined>[] => {\r\n  return AUDIO_FOLDES.map((folder) => {\r\n    return makeFolder(pathLib, fsLib, basePath, FOLDER_IMG, folder);\r\n  });\r\n};\r\n\r\nexport const makeDataFoldes = (\r\n  pathLib: typeof PathLib,\r\n  fsLib: typeof FsLib,\r\n  basePath: string\r\n): Promise<string | undefined>[] => {\r\n  return [makeFolder(pathLib, fsLib, basePath, FOLDER_DATA, \"\")];\r\n};\r\n","export const isValidAssetPath = (path: string): boolean => {\r\n  // 空文字列は有効\r\n  if (path === \"\") {\r\n    return true;\r\n  }\r\n\r\n  if (path.endsWith(\"/\")) {\r\n    return false;\r\n  }\r\n  if (hasInvalidChars(path)) {\r\n    return false;\r\n  }\r\n  if (testWindowsReserved(path)) {\r\n    return false;\r\n  }\r\n\r\n  // 有効なパス\r\n  return true;\r\n};\r\n\r\nconst invalidWindowsNames: ReadonlyArray<string> = [\r\n  \"con\",\r\n  \"prn\",\r\n  \"aux\",\r\n  \"nul\",\r\n  \"com1\",\r\n  \"com2\",\r\n  \"com3\",\r\n  \"com4\",\r\n  \"com5\",\r\n  \"com6\",\r\n  \"com7\",\r\n  \"com8\",\r\n  \"com9\",\r\n  \"lpt1\",\r\n  \"lpt2\",\r\n  \"lpt3\",\r\n  \"lpt4\",\r\n  \"lpt5\",\r\n  \"lpt6\",\r\n  \"lpt7\",\r\n  \"lpt8\",\r\n  \"lpt9\",\r\n];\r\n\r\nconst hasInvalidChars = (path: string): boolean => {\r\n  return /[.#\\\\]/.test(path);\r\n};\r\n\r\nconst testWindowsReserved = (path: string): boolean => {\r\n  // Windowsの予約ファイル名を防ぐ\r\n  const segments = path.split(\"/\");\r\n  return segments.some((segment) =>\r\n    invalidWindowsNames.includes(segment.toLowerCase())\r\n  );\r\n};\r\n","import type { Dirent } from \"node:fs\";\r\nimport type PathLib from \"node:path\";\r\nimport { ensurePath } from \"./ensure\";\r\nimport type { AudioFolders, ImageFolders } from \"@sigureya/rpgtypes\";\r\nimport { FOLDER_IMG, FOLDER_AUDIO } from \"@sigureya/rpgtypes\";\r\nimport type { AudioDirent, ImageDirent } from \"./types/assetPath\";\r\nimport type { FsLib_ReadDir } from \"folder/data/features/detail/libTypes\";\r\n\r\nexport const listupImageFiles = async (\r\n  pathLib: typeof PathLib,\r\n  fsLib: FsLib_ReadDir,\r\n  basePath: string,\r\n  subFolderName: ImageFolders\r\n): Promise<ImageDirent[]> => {\r\n  const dirPath = ensurePath(pathLib, basePath, FOLDER_IMG, subFolderName);\r\n  const dirents = await fsLib.readdir(dirPath, { withFileTypes: true });\r\n  return dirents.filter(isImageDirent);\r\n};\r\n\r\nconst areExtention = <D extends { name: string }, Ext extends `.${string}`>(\r\n  dirent: D,\r\n  ext: Ext\r\n): dirent is D & { name: `${string}${Ext}` } => {\r\n  return dirent.name.endsWith(ext);\r\n};\r\n\r\nexport const isAudioFileExtension = <D extends { name: string }>(dirent: D) => {\r\n  return areExtention(dirent, \".ogg\") || areExtention(dirent, \".m4a\");\r\n};\r\n\r\nexport const isImageFileExtension = <D extends { name: string }>(dirent: D) => {\r\n  return areExtention(dirent, \".png\");\r\n};\r\n\r\nexport const isImageDirent = (dirent: Dirent): dirent is ImageDirent => {\r\n  return dirent.isFile() && isImageFileExtension(dirent);\r\n};\r\n\r\nexport const isAudioDirent = (dirent: Dirent): dirent is AudioDirent => {\r\n  return dirent.isFile() && isAudioFileExtension(dirent);\r\n};\r\n\r\nexport const listupAudioFiles = async (\r\n  pathLib: typeof PathLib,\r\n  fsLib: FsLib_ReadDir,\r\n  basePath: string,\r\n  subFolderName: AudioFolders\r\n): Promise<AudioDirent[]> => {\r\n  const dirPath = ensurePath(pathLib, basePath, FOLDER_AUDIO, subFolderName);\r\n  const dirents = await fsLib.readdir(dirPath, { withFileTypes: true });\r\n  return dirents.filter(isAudioDirent);\r\n};\r\n"],"names":[],"mappings":";AAWa,MAAA,6BAA6B,CACxC,UACuB;AAChB,SAAA,CAAC,MAAM,GAAG,KAAK;AACxB;AASO,MAAM,iBAAiB,CAC5B,SACA,UACA,aACW;AACX,SAAO,SAAS,SAAS,GAAG,QAAQ,GAAG,GAAG,WAAW,EAAE,IACnD,QAAQ,QAAQ,UAAU,QAAQ,IAClC,QAAQ,QAAQ,UAAU,aAAa,QAAQ;AACrD;AAEa,MAAA,yBAAyB,CACpC,MACA,OACQ;AACJ,MAAA,MAAM,QAAQ,IAAI,GAAG;AACvB,WAAO,KAAK,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC;AAAA,EAAA;AAEjC,QAAA,IAAI,MAAM,qBAAqB;AACvC;AAEO,MAAM,gBAAgB,OAC3B,OACA,MACA,MACA,QAAgB,MACE;AACZ,QAAA,OAAuB,2BAA2B,IAAI;AACrD,SAAA,MAAM,UAAU,MAAM,KAAK,UAAU,MAAM,MAAM,KAAK,GAAG,OAAO;AACzE;AAaO,MAAM,uBAAuB,OAClC,OACA,cACA,eACiB;AACjB,QAAM,WAAmB,MAAM,MAAM,SAAS,cAAc,OAAO;AAC7D,QAAA,MAAM,KAAK,MAAM,QAAQ;AACxB,SAAA,uBAAuB,KAAK,UAAU;AAC/C;AC7Da,MAAA,sBAAsB,CACjC,SACA,aACW;AACJ,SAAA,eAAe,SAAS,UAAU,eAAe;AAC1D;AAEO,MAAM,qBAAqB,CAChC,SACA,OACA,UACA,QACA,QAAgB,MACE;AACZ,QAAA,OAAe,oBAAoB,SAAS,QAAQ;AAC1D,SAAO,cAAc,OAAO,MAAM,QAAQ,KAAK;AACjD;AAEO,MAAM,oBAAoB,OAC/B,SACA,OACA,aAC0B;AACpB,QAAA,OAAe,oBAAoB,SAAS,QAAQ;AACnD,SAAA,qBAAiC,OAAO,MAAM,WAAW;AAClE;ACzBa,MAAA,sBAAsB,CACjC,SACA,aACW;AACJ,SAAA,eAAe,SAAS,UAAU,eAAe;AAC1D;AAEO,MAAM,qBAAqB,CAChC,SACA,OACA,UACA,QACA,QAAgB,MACE;AACZ,QAAA,OAAe,oBAAoB,SAAS,QAAQ;AAC1D,SAAO,cAAc,OAAO,MAAM,QAAQ,KAAK;AACjD;AAEO,MAAM,oBAAoB,OAC/B,SACA,OACA,aAC0B;AACpB,QAAA,OAAe,oBAAoB,SAAS,QAAQ;AACnD,SAAA,qBAAiC,OAAO,MAAM,WAAW;AAClE;ACzBa,MAAA,sBAAsB,CACjC,SACA,aACW;AACJ,SAAA,eAAe,SAAS,UAAU,gBAAgB;AAC3D;AAEO,MAAM,qBAAqB,CAChC,SACA,OACA,UACA,QACA,QAAgB,MACE;AACZ,QAAA,OAAe,oBAAoB,SAAS,QAAQ;AAC1D,SAAO,cAAc,OAAO,MAAM,QAAQ,KAAK;AACjD;AAEO,MAAM,oBAAoB,OAC/B,SACA,OACA,aAC0B;AACpB,QAAA,OAAe,oBAAoB,SAAS,QAAQ;AACnD,SAAA,qBAAiC,OAAO,MAAM,WAAW;AAClE;ACzBa,MAAA,sBAAsB,CACjC,SACA,aACW;AACJ,SAAA,eAAe,SAAS,UAAU,gBAAgB;AAC3D;AAEO,MAAM,qBAAqB,CAChC,SACA,OACA,UACA,SACA,QAAgB,MACE;AACZ,QAAA,OAAe,oBAAoB,SAAS,QAAQ;AAC1D,SAAO,cAAc,OAAO,MAAM,SAAS,KAAK;AAClD;AAEO,MAAM,oBAAoB,OAC/B,SACA,OACA,aAC0B;AACpB,QAAA,OAAe,oBAAoB,SAAS,QAAQ;AACnD,SAAA,qBAAiC,OAAO,MAAM,WAAW;AAClE;AC7Ba,MAAA,qBAAqB,CAChC,SACA,aACW;AACJ,SAAA,eAAe,SAAS,UAAU,cAAc;AACzD;AAEO,MAAM,oBAAoB,CAC/B,SACA,OACA,UACA,OACA,QAAgB,MACE;AACZ,QAAA,OAAe,mBAAmB,SAAS,QAAQ;AACzD,SAAO,cAAc,OAAO,MAAM,OAAO,KAAK;AAChD;AAEO,MAAM,mBAAmB,OAC9B,SACA,OACA,aACyB;AACnB,QAAA,OAAe,mBAAmB,SAAS,QAAQ;AAClD,SAAA,qBAAgC,OAAO,MAAM,UAAU;AAChE;ACrBa,MAAA,sBAAsB,CACjC,SACA,aACW;AACJ,SAAA,eAAe,SAAS,UAAU,eAAe;AAC1D;AAEO,MAAM,qBAAqB,CAChC,SACA,OACA,UACA,QACA,QAAgB,MACE;AACZ,QAAA,OAAe,oBAAoB,SAAS,QAAQ;AAC1D,SAAO,cAAc,OAAO,MAAM,QAAQ,KAAK;AACjD;AAEO,MAAM,oBAAoB,OAC/B,SACA,OACA,aAC0B;AACpB,QAAA,OAAe,oBAAoB,SAAS,QAAQ;AACnD,SAAA,qBAAiC,OAAO,MAAM,WAAW;AAClE;ACzBa,MAAA,sBAAsB,CACjC,SACA,aACW;AACJ,SAAA,eAAe,SAAS,UAAU,eAAe;AAC1D;AAEO,MAAM,qBAAqB,CAChC,SACA,OACA,UACA,QACA,QAAgB,MACE;AACZ,QAAA,OAAe,oBAAoB,SAAS,QAAQ;AAC1D,SAAO,cAAc,OAAO,MAAM,QAAQ,KAAK;AACjD;AAEO,MAAM,oBAAoB,OAC/B,SACA,OACA,aAC0B;AACpB,QAAA,OAAe,oBAAoB,SAAS,QAAQ;AACnD,SAAA,qBAAiC,OAAO,MAAM,WAAW;AAClE;ACzBa,MAAA,uBAAuB,CAClC,SACA,aACW;AACJ,SAAA,eAAe,SAAS,UAAU,gBAAgB;AAC3D;AAEO,MAAM,sBAAsB,CACjC,SACA,OACA,UACA,SACA,QAAgB,MACE;AACZ,QAAA,OAAe,qBAAqB,SAAS,QAAQ;AAC3D,SAAO,cAAc,OAAO,MAAM,SAAS,KAAK;AAClD;AAEO,MAAM,qBAAqB,OAChC,SACA,OACA,aAC2B;AACrB,QAAA,OAAe,qBAAqB,SAAS,QAAQ;AACpD,SAAA,qBAAkC,OAAO,MAAM,YAAY;AACpE;AC5BA,MAAM,cAAc,CAAC,SAAsC;AAEvD,SAAA,OAAO,SAAS,YAChB,SAAS,QACT,QAAQ,QACR,OAAQ,KAAoB,OAAO;AAEvC;AAEa,MAAA,sBAAsB,CACjC,SACA,aACW;AACJ,SAAA,eAAe,SAAS,UAAU,eAAe;AAC1D;AAEO,MAAM,qBAAqB,CAChC,SACA,OACA,UACA,QACA,QAAgB,MACE;AACZ,QAAA,OAAe,oBAAoB,SAAS,QAAQ;AAC1D,SAAO,cAAc,OAAO,MAAM,QAAQ,KAAK;AACjD;AAEO,MAAM,oBAAoB,OAC/B,SACA,OACA,aAC0B;AACpB,QAAA,OAAe,oBAAoB,SAAS,QAAQ;AACnD,SAAA,qBAAiC,OAAO,MAAM,WAAW;AAClE;AChCA,MAAM,gBAAgB,CAAC,SAA4C;AACjE,SAAO,CAAC,CAAC,QAAQ,OAAO,SAAS,YAAY,QAAQ;AACvD;AAEa,MAAA,4BAA4B,CACvC,SACA,aACW;AACJ,SAAA,eAAe,SAAS,UAAU,sBAAsB;AACjE;AAEO,MAAM,2BAA2B,CACtC,SACA,OACA,UACA,cACA,QAAgB,MACE;AACZ,QAAA,OAAe,0BAA0B,SAAS,QAAQ;AAChE,SAAO,cAAc,OAAO,MAAM,cAAc,KAAK;AACvD;AAEO,MAAM,0BAA0B,OACrC,SACA,OACA,aACgC;AAC1B,QAAA,OAAe,0BAA0B,SAAS,QAAQ;AACzD,SAAA,qBAAuC,OAAO,MAAM,aAAa;AAC1E;AC/Ba,MAAA,wBAAwB,CACnC,SACA,aACW;AACJ,SAAA,eAAe,SAAS,UAAU,kBAAkB;AAC7D;AAEO,MAAM,uBAAuB,CAClC,SACA,OACA,UACA,UACA,QAAgB,MACE;AACZ,QAAA,OAAe,sBAAsB,SAAS,QAAQ;AAC5D,SAAO,cAAc,OAAO,MAAM,UAAU,KAAK;AACnD;AAEO,MAAM,sBAAsB,OACjC,SACA,OACA,aAC4B;AACtB,QAAA,OAAe,sBAAsB,SAAS,QAAQ;AACrD,SAAA,qBAAmC,OAAO,MAAM,aAAa;AACtE;ACtBa,MAAA,gBAAgB,CAAC,aAAqB;AACjD,SAAO,SAAS,WAAW,KAAK,KAAK,SAAS,SAAS,OAAO;AAChE;AAEa,MAAA,iBAAiB,OAC5B,OACA,iBACsB;AACd,UAAA,MAAM,MAAM,QAAQ,cAAc,EAAE,eAAe,KAAM,CAAA,GAAG;AAAA,IAClE,CAAC,WAAW,OAAO,OAAY,KAAA,cAAc,OAAO,IAAI;AAAA,EAC1D;AACF;AAEA,MAAM,kBAAkB,CAAC,UAAkB;AACzC,SAAO,MAAM,OAAO,KAAK,EAAE,SAAS,GAAG,GAAG,CAAC;AAC7C;AAEO,MAAM,qBAAqB,CAChC,SACA,UACA,UACG;AACG,QAAA,WAAW,gBAAgB,KAAK;AACtC,QAAM,WAAW,QAAQ,QAAQ,UAAU,QAAQ;AAC5C,SAAA,EAAE,UAAU,SAAS;AAC9B;AAGA,MAAM,8BAA8B,CAAC,SAA4B;AAE/D,SAAO,YAAY,IAAU;AAC/B;AAEO,MAAM,sBAAsB,OACjC,OACA,SACA,UACA,SACiC;AAC3B,QAAA,EAAE,UAAU,aAAa,mBAAmB,SAAS,UAAU,KAAK,EAAE;AAExE,MAAA;AACF,UAAM,OAAO,MAAM,MAAM,SAAS,UAAU,OAAO;AACnD,UAAM,UAAoB,4BAA4B,KAAK,MAAM,IAAI,CAAC;AAC/D,WAAA;AAAA,MACL,UAAU;AAAA,MACV,KAAK;AAAA,MACL,aAAa,KAAK;AAAA,IACpB;AAAA,EAAA,QACM;AACC,WAAA;AAAA,MACL,UAAU;AAAA,MACV,aAAa,KAAK;AAAA,MAClB,KAAK;AAAA,IACP;AAAA,EAAA;AAEJ;AAEO,MAAM,qBAAqB,OAChC,OACA,SACA,UACA,IACA,UAC0B;AAC1B,QAAM,OAAO,SAAU,MAAM,oBAAoB,SAAS,OAAO,QAAQ;AACzE,SAAO,KACJ,OAAO,CAAC,SAAS,CAAC,CAAC,QAAQ,cAAc,IAAI,CAAC,EAC9C,IAAI,OAAO,SAAuB;AACjC,UAAM,cAAc,MAAM;AAAA,MACxB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AACA,WAAO,GAAG,WAAW;AAAA,EAAA,CACtB;AACL;AC/EA,MAAM,eAAe,CAAC,SAAuC;AAC3D,SAAO,CAAC,CAAC;AACX;AAEa,MAAA,uBAAuB,CAClC,SACA,aACW;AACJ,SAAA,eAAe,SAAS,UAAU,eAAe;AAC1D;AAEO,MAAM,sBAAsB,CACjC,SACA,OACA,UACA,QACA,QAAgB,MACE;AACZ,QAAA,OAAe,qBAAqB,SAAS,QAAQ;AAC3D,QAAM,OAAO,KAAK,UAAU,QAAQ,MAAM,KAAK;AAC/C,SAAO,MAAM,UAAU,MAAM,MAAM,MAAM;AAC3C;AAEO,MAAM,qBAAqB,OAChC,SACA,OACA,aACyB;AACnB,QAAA,OAAe,qBAAqB,SAAS,QAAQ;AAC3D,QAAM,OAAO,MAAM,MAAM,SAAS,MAAM,MAAM;AACxC,QAAA,OAAO,KAAK,MAAM,IAAI;AACxB,MAAA,CAAC,aAAa,IAAI,GAAG;AACvB,UAAM,IAAI,MAAM,wBAAwB,IAAI,EAAE;AAAA,EAAA;AAEzC,SAAA;AACT;ACfO,MAAM,mBAAmB,OAC9B,OACA,SACA,UACA,eACwD;AACjD,SAAA;AAAA,IACL,OAAO,WAAW,QACd,WAAW;AAAA,MACT,MAAM,kBAAkB,SAAS,OAAO,QAAQ;AAAA,MAChD;AAAA,IAAA,IAEF;AAAA,IACJ,OAAO,WAAW,QACd,WAAW;AAAA,MACT,MAAM,kBAAkB,SAAS,OAAO,QAAQ;AAAA,MAChD;AAAA,IAAA,IAEF;AAAA,IAEJ,OAAO,WAAW,QACd,WAAW;AAAA,MACT,MAAM,kBAAkB,SAAS,OAAO,QAAQ;AAAA,MAChD;AAAA,IAAA,IAEF;AAAA,IACJ,OAAO,WAAW,QACd,WAAW;AAAA,MACT,MAAM,kBAAkB,SAAS,OAAO,QAAQ;AAAA,MAChD;AAAA,IAAA,IAEF;AAAA,IACJ,MAAM,WAAW,OACb,WAAW;AAAA,MACT,MAAM,iBAAiB,SAAS,OAAO,QAAQ;AAAA,MAC/C;AAAA,IAAA,IAEF;AAAA,IAEJ,OAAO,WAAW,QACd,WAAW;AAAA,MACT,MAAM,kBAAkB,SAAS,OAAO,QAAQ;AAAA,MAChD;AAAA,IAAA,IAEF;AAAA,IAEJ,OAAO,WAAW,QACd,WAAW;AAAA,MACT,MAAM,kBAAkB,SAAS,OAAO,QAAQ;AAAA,MAChD;AAAA,IAAA,IAEF;AAAA,IACJ,QAAQ,WAAW,SACf,WAAW;AAAA,MACT,MAAM,mBAAmB,SAAS,OAAO,QAAQ;AAAA,MACjD;AAAA,IAAA,IAEF;AAAA,IAEJ,OAAO,WAAW,QACd,WAAW;AAAA,MACT,MAAM,kBAAkB,SAAS,OAAO,QAAQ;AAAA,MAChD;AAAA,IAAA,IAEF;AAAA,IACJ,aAAa,WAAW,cACpB,WAAW;AAAA,MACT,MAAM,wBAAwB,SAAS,OAAO,QAAQ;AAAA,MACtD;AAAA,IAAA,IAEF;AAAA,EACN;AACF;ACtFA,MAAM,MAAM,CAAC,OAA4B;AACnC,MAAA;AACF,WAAO,GAAG;AAAA,EAAA,QACJ;AACN,WAAO,QAAQ,QAAQ;AAAA,EAAA;AAE3B;AAEO,MAAM,iBAAiB,OAC5B,OACA,SACA,UACA,SACoB;AACpB,SAAO,QAAQ,IAAI;AAAA,IACjB,IAAI,MAAM,mBAAmB,SAAS,OAAO,UAAU,KAAK,MAAM,CAAC;AAAA,IACnE,IAAI,MAAM,mBAAmB,SAAS,OAAO,UAAU,KAAK,OAAO,CAAC;AAAA,IACpE,IAAI,MAAM,mBAAmB,SAAS,OAAO,UAAU,KAAK,MAAM,CAAC;AAAA,IACnE,IAAI,MAAM,oBAAoB,SAAS,OAAO,UAAU,KAAK,OAAO,CAAC;AAAA,IACrE,IAAI,MAAM,mBAAmB,SAAS,OAAO,UAAU,KAAK,OAAO,CAAC;AAAA,IACpE,IAAI,MAAM,kBAAkB,SAAS,OAAO,UAAU,KAAK,KAAK,CAAC;AAAA,IACjE,IAAI,MAAM,mBAAmB,SAAS,OAAO,UAAU,KAAK,MAAM,CAAC;AAAA,IACnE,IAAI,MAAM,mBAAmB,SAAS,OAAO,UAAU,KAAK,MAAM,CAAC;AAAA,EAAA,CACpE;AACH;ACrCO,MAAM,aAAa,CACxB,SACA,UACA,YACA,kBACW;AAEL,QAAA,qBAAqB,QAAQ,UAAU,QAAQ;AAEjD,MAAA,mBAAmB,SAAS,GAAG,QAAQ,GAAG,GAAG,UAAU,EAAE,GAAG;AAEvD,WAAA,QAAQ,QAAQ,oBAAoB,aAAa;AAAA,EAAA;AAG1D,MACE,mBAAmB;AAAA,IACjB,GAAG,QAAQ,GAAG,GAAG,UAAU,GAAG,QAAQ,GAAG,GAAG,aAAa;AAAA,EAAA,GAE3D;AACO,WAAA;AAAA,EAAA;AAIT,SAAO,QAAQ,QAAQ,UAAU,YAAY,aAAa;AAC5D;AAEa,MAAA,mBAAmB,CAAC,aAA8B;AAGtD,SAAA,CAAC,SAAS,SAAS,GAAG;AAC/B;AAEA,MAAM,iBAAiB,CACrB,SACA,UACA,WACA,WACA,UACA,cACW;AACP,MAAA,CAAC,iBAAiB,QAAQ,GAAG;AAC/B,UAAM,IAAI,MAAM,sBAAsB,QAAQ,EAAE;AAAA,EAAA;AAElD,QAAM,MAAM,WAAW,SAAS,UAAU,WAAW,SAAS;AAE9D,SAAO,QAAQ,KAAK,KAAK,GAAG,QAAQ,IAAI,SAAS,EAAE;AACrD;AAEO,MAAM,sBAAsB,CACjC,SACA,UACA,eACA,aACG;AACI,SAAA;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;ACxDO,MAAM,eAAe,CAC1B,SACA,UACA,aACW;AACX,SAAO,oBAAoB,SAAS,UAAU,kBAAkB,QAAQ;AAC1E;AAEO,MAAM,eAAe,CAC1B,SACA,UACA,aACW;AACX,SAAO,oBAAoB,SAAS,UAAU,kBAAkB,QAAQ;AAC1E;AAEO,MAAM,cAAc,CACzB,SACA,UACA,aACW;AACX,SAAO,oBAAoB,SAAS,UAAU,iBAAiB,QAAQ;AACzE;AAEO,MAAM,cAAc,CACzB,SACA,UACA,aACW;AACX,SAAO,oBAAoB,SAAS,UAAU,iBAAiB,QAAQ;AACzE;ACrBO,MAAM,sBAAsB,CACjC,SACA,UACA,aACG;AACH,SAAO,oBAAoB,SAAS,UAAU,kBAAkB,QAAQ;AAC1E;AAEO,MAAM,oBAAoB,CAC/B,SACA,UACA,aACW;AACX,SAAO,oBAAoB,SAAS,UAAU,qBAAqB,QAAQ;AAC7E;AAEO,MAAM,uBAAuB,CAClC,SACA,UACA,aACW;AACJ,SAAA;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;AAEO,MAAM,uBAAuB,CAClC,SACA,UACA,aACW;AACJ,SAAA;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;AAEO,MAAM,2BAA2B,CACtC,SACA,UACA,aACW;AACX,SAAO,oBAAoB,SAAS,UAAU,qBAAqB,QAAQ;AAC7E;AAEO,MAAM,uBAAuB,CAClC,SACA,UACA,aACW;AACX,SAAO,oBAAoB,SAAS,UAAU,oBAAoB,QAAQ;AAC5E;AAEO,MAAM,sBAAsB,CACjC,SACA,UACA,aACW;AACJ,SAAA;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;AAEO,MAAM,0BAA0B,CACrC,SACA,UACA,aACW;AACX,SAAO,oBAAoB,SAAS,UAAU,sBAAsB,QAAQ;AAC9E;AAEO,MAAM,0BAA0B,CACrC,SACA,UACA,aACW;AACJ,SAAA;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;AAEO,MAAM,uBAAuB,CAClC,SACA,UACA,aACW;AACX,SAAO,oBAAoB,SAAS,UAAU,mBAAmB,QAAQ;AAC3E;AAEO,MAAM,yBAAyB,CACpC,SACA,UACA,aACW;AACX,SAAO,oBAAoB,SAAS,UAAU,qBAAqB,QAAQ;AAC7E;AAEO,MAAM,wBAAwB,CACnC,SACA,UACA,aACW;AACX,SAAO,oBAAoB,SAAS,UAAU,oBAAoB,QAAQ;AAC5E;AAEO,MAAM,wBAAwB,CACnC,SACA,UACA,aACW;AACX,SAAO,oBAAoB,SAAS,UAAU,oBAAoB,QAAQ;AAC5E;ACrIO,MAAM,eAAe;AAAA,EAC1B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;ACIO,MAAM,gBAAgB;AAAA,EAC3B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;ACxBA,MAAM,aAAa,CACjB,SACA,OACA,UACA,YACA,kBACgC;AAChC,QAAM,OAAO,WAAW,SAAS,UAAU,YAAY,aAAa;AAC7D,SAAA,MAAM,MAAM,MAAM;AAAA,IACvB,WAAW;AAAA,EAAA,CACZ;AACH;AAEO,MAAM,mBAAmB,CAC9B,SACA,OACA,aACkC;AAC3B,SAAA,cAAc,IAAI,CAAC,WAAW;AACnC,WAAO,WAAW,SAAS,OAAO,UAAU,YAAY,MAAM;AAAA,EAAA,CAC/D;AACH;AAEO,MAAM,mBAAmB,CAC9B,SACA,OACA,aACkC;AAC3B,SAAA,aAAa,IAAI,CAAC,WAAW;AAClC,WAAO,WAAW,SAAS,OAAO,UAAU,YAAY,MAAM;AAAA,EAAA,CAC/D;AACH;AAEO,MAAM,iBAAiB,CAC5B,SACA,OACA,aACkC;AAClC,SAAO,CAAC,WAAW,SAAS,OAAO,UAAU,aAAa,EAAE,CAAC;AAC/D;AC7Ca,MAAA,mBAAmB,CAAC,SAA0B;AAEzD,MAAI,SAAS,IAAI;AACR,WAAA;AAAA,EAAA;AAGL,MAAA,KAAK,SAAS,GAAG,GAAG;AACf,WAAA;AAAA,EAAA;AAEL,MAAA,gBAAgB,IAAI,GAAG;AAClB,WAAA;AAAA,EAAA;AAEL,MAAA,oBAAoB,IAAI,GAAG;AACtB,WAAA;AAAA,EAAA;AAIF,SAAA;AACT;AAEA,MAAM,sBAA6C;AAAA,EACjD;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AAEA,MAAM,kBAAkB,CAAC,SAA0B;AAC1C,SAAA,SAAS,KAAK,IAAI;AAC3B;AAEA,MAAM,sBAAsB,CAAC,SAA0B;AAE/C,QAAA,WAAW,KAAK,MAAM,GAAG;AAC/B,SAAO,SAAS;AAAA,IAAK,CAAC,YACpB,oBAAoB,SAAS,QAAQ,YAAa,CAAA;AAAA,EACpD;AACF;AC/CO,MAAM,mBAAmB,OAC9B,SACA,OACA,UACA,kBAC2B;AAC3B,QAAM,UAAU,WAAW,SAAS,UAAU,YAAY,aAAa;AACjE,QAAA,UAAU,MAAM,MAAM,QAAQ,SAAS,EAAE,eAAe,MAAM;AAC7D,SAAA,QAAQ,OAAO,aAAa;AACrC;AAEA,MAAM,eAAe,CACnB,QACA,QAC8C;AACvC,SAAA,OAAO,KAAK,SAAS,GAAG;AACjC;AAEa,MAAA,uBAAuB,CAA6B,WAAc;AAC7E,SAAO,aAAa,QAAQ,MAAM,KAAK,aAAa,QAAQ,MAAM;AACpE;AAEa,MAAA,uBAAuB,CAA6B,WAAc;AACtE,SAAA,aAAa,QAAQ,MAAM;AACpC;AAEa,MAAA,gBAAgB,CAAC,WAA0C;AACtE,SAAO,OAAO,YAAY,qBAAqB,MAAM;AACvD;AAEa,MAAA,gBAAgB,CAAC,WAA0C;AACtE,SAAO,OAAO,YAAY,qBAAqB,MAAM;AACvD;AAEO,MAAM,mBAAmB,OAC9B,SACA,OACA,UACA,kBAC2B;AAC3B,QAAM,UAAU,WAAW,SAAS,UAAU,cAAc,aAAa;AACnE,QAAA,UAAU,MAAM,MAAM,QAAQ,SAAS,EAAE,eAAe,MAAM;AAC7D,SAAA,QAAQ,OAAO,aAAa;AACrC;"}